
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002678  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002784  08002784  00012784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027a4  080027a4  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  080027a4  080027a4  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027a4  080027a4  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027a4  080027a4  000127a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027a8  080027a8  000127a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  080027ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000050  080027fc  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080027fc  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c64  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cfb  00000000  00000000  00029cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002b9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002c460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170a2  00000000  00000000  0002cdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c60c  00000000  00000000  00043e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824bd  00000000  00000000  00050476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2933  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000291c  00000000  00000000  000d2988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000050 	.word	0x20000050
 8000128:	00000000 	.word	0x00000000
 800012c:	0800276c 	.word	0x0800276c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000054 	.word	0x20000054
 8000148:	0800276c 	.word	0x0800276c

0800014c <fsm_automatic_run>:
 */

#include "fsm_automatic.h"


void fsm_automatic_run(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status){
 8000150:	4b99      	ldr	r3, [pc, #612]	; (80003b8 <fsm_automatic_run+0x26c>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3b01      	subs	r3, #1
 8000156:	2b04      	cmp	r3, #4
 8000158:	f200 8197 	bhi.w	800048a <fsm_automatic_run+0x33e>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <fsm_automatic_run+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	08000179 	.word	0x08000179
 8000168:	080001df 	.word	0x080001df
 800016c:	0800027b 	.word	0x0800027b
 8000170:	0800031f 	.word	0x0800031f
 8000174:	080003e9 	.word	0x080003e9
	case INIT:
		status = AUTO_RED_GREEN;
 8000178:	4b8f      	ldr	r3, [pc, #572]	; (80003b8 <fsm_automatic_run+0x26c>)
 800017a:	2202      	movs	r2, #2
 800017c:	601a      	str	r2, [r3, #0]
		setTimer1(defaultTimeGreen*1000);
 800017e:	4b8f      	ldr	r3, [pc, #572]	; (80003bc <fsm_automatic_run+0x270>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000186:	fb02 f303 	mul.w	r3, r2, r3
 800018a:	4618      	mov	r0, r3
 800018c:	f000 fe84 	bl	8000e98 <setTimer1>
		timeRed = defaultTimeRed;
 8000190:	4b8b      	ldr	r3, [pc, #556]	; (80003c0 <fsm_automatic_run+0x274>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a8b      	ldr	r2, [pc, #556]	; (80003c4 <fsm_automatic_run+0x278>)
 8000196:	6013      	str	r3, [r2, #0]
		timeGreen = defaultTimeGreen;
 8000198:	4b88      	ldr	r3, [pc, #544]	; (80003bc <fsm_automatic_run+0x270>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a8a      	ldr	r2, [pc, #552]	; (80003c8 <fsm_automatic_run+0x27c>)
 800019e:	6013      	str	r3, [r2, #0]
		tempRed = defaultTimeRed;
 80001a0:	4b87      	ldr	r3, [pc, #540]	; (80003c0 <fsm_automatic_run+0x274>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a89      	ldr	r2, [pc, #548]	; (80003cc <fsm_automatic_run+0x280>)
 80001a6:	6013      	str	r3, [r2, #0]
		tempYellow = defaultTimeYellow;
 80001a8:	4b89      	ldr	r3, [pc, #548]	; (80003d0 <fsm_automatic_run+0x284>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a89      	ldr	r2, [pc, #548]	; (80003d4 <fsm_automatic_run+0x288>)
 80001ae:	6013      	str	r3, [r2, #0]
		tempGreen = defaultTimeGreen;
 80001b0:	4b82      	ldr	r3, [pc, #520]	; (80003bc <fsm_automatic_run+0x270>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a88      	ldr	r2, [pc, #544]	; (80003d8 <fsm_automatic_run+0x28c>)
 80001b6:	6013      	str	r3, [r2, #0]
		setTimer2(1000);
 80001b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001bc:	f000 fe88 	bl	8000ed0 <setTimer2>
		updateClockBuffer(timeRed--, timeGreen--);
 80001c0:	4b80      	ldr	r3, [pc, #512]	; (80003c4 <fsm_automatic_run+0x278>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	1e5a      	subs	r2, r3, #1
 80001c6:	497f      	ldr	r1, [pc, #508]	; (80003c4 <fsm_automatic_run+0x278>)
 80001c8:	600a      	str	r2, [r1, #0]
 80001ca:	4a7f      	ldr	r2, [pc, #508]	; (80003c8 <fsm_automatic_run+0x27c>)
 80001cc:	6812      	ldr	r2, [r2, #0]
 80001ce:	1e51      	subs	r1, r2, #1
 80001d0:	487d      	ldr	r0, [pc, #500]	; (80003c8 <fsm_automatic_run+0x27c>)
 80001d2:	6001      	str	r1, [r0, #0]
 80001d4:	4611      	mov	r1, r2
 80001d6:	4618      	mov	r0, r3
 80001d8:	f000 fbf0 	bl	80009bc <updateClockBuffer>
		break;
 80001dc:	e15e      	b.n	800049c <fsm_automatic_run+0x350>
	case AUTO_RED_GREEN:
		setTrafficRed();
 80001de:	f000 fef1 	bl	8000fc4 <setTrafficRed>
		setTrafficGreen1();
 80001e2:	f000 ff47 	bl	8001074 <setTrafficGreen1>
		if(timer1_flag == 1){
 80001e6:	4b7d      	ldr	r3, [pc, #500]	; (80003dc <fsm_automatic_run+0x290>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d121      	bne.n	8000232 <fsm_automatic_run+0xe6>
			status = AUTO_RED_YELLOW;
 80001ee:	4b72      	ldr	r3, [pc, #456]	; (80003b8 <fsm_automatic_run+0x26c>)
 80001f0:	2203      	movs	r2, #3
 80001f2:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeYellow*1000);
 80001f4:	4b76      	ldr	r3, [pc, #472]	; (80003d0 <fsm_automatic_run+0x284>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001fc:	fb02 f303 	mul.w	r3, r2, r3
 8000200:	4618      	mov	r0, r3
 8000202:	f000 fe49 	bl	8000e98 <setTimer1>
			timeYellow = defaultTimeYellow;
 8000206:	4b72      	ldr	r3, [pc, #456]	; (80003d0 <fsm_automatic_run+0x284>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a75      	ldr	r2, [pc, #468]	; (80003e0 <fsm_automatic_run+0x294>)
 800020c:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeRed--, timeYellow--);
 800020e:	4b6d      	ldr	r3, [pc, #436]	; (80003c4 <fsm_automatic_run+0x278>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	1e5a      	subs	r2, r3, #1
 8000214:	496b      	ldr	r1, [pc, #428]	; (80003c4 <fsm_automatic_run+0x278>)
 8000216:	600a      	str	r2, [r1, #0]
 8000218:	4a71      	ldr	r2, [pc, #452]	; (80003e0 <fsm_automatic_run+0x294>)
 800021a:	6812      	ldr	r2, [r2, #0]
 800021c:	1e51      	subs	r1, r2, #1
 800021e:	4870      	ldr	r0, [pc, #448]	; (80003e0 <fsm_automatic_run+0x294>)
 8000220:	6001      	str	r1, [r0, #0]
 8000222:	4611      	mov	r1, r2
 8000224:	4618      	mov	r0, r3
 8000226:	f000 fbc9 	bl	80009bc <updateClockBuffer>
			setTimer2(1000);
 800022a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800022e:	f000 fe4f 	bl	8000ed0 <setTimer2>
		}
		if(timer2_flag == 1){
 8000232:	4b6c      	ldr	r3, [pc, #432]	; (80003e4 <fsm_automatic_run+0x298>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b01      	cmp	r3, #1
 8000238:	d111      	bne.n	800025e <fsm_automatic_run+0x112>
			updateClockBuffer(timeRed--, timeGreen--);
 800023a:	4b62      	ldr	r3, [pc, #392]	; (80003c4 <fsm_automatic_run+0x278>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	1e5a      	subs	r2, r3, #1
 8000240:	4960      	ldr	r1, [pc, #384]	; (80003c4 <fsm_automatic_run+0x278>)
 8000242:	600a      	str	r2, [r1, #0]
 8000244:	4a60      	ldr	r2, [pc, #384]	; (80003c8 <fsm_automatic_run+0x27c>)
 8000246:	6812      	ldr	r2, [r2, #0]
 8000248:	1e51      	subs	r1, r2, #1
 800024a:	485f      	ldr	r0, [pc, #380]	; (80003c8 <fsm_automatic_run+0x27c>)
 800024c:	6001      	str	r1, [r0, #0]
 800024e:	4611      	mov	r1, r2
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fbb3 	bl	80009bc <updateClockBuffer>
			setTimer2(1000);
 8000256:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800025a:	f000 fe39 	bl	8000ed0 <setTimer2>
		}
		if(is_button_pressed(0) == 1){
 800025e:	2000      	movs	r0, #0
 8000260:	f000 fb6c 	bl	800093c <is_button_pressed>
 8000264:	4603      	mov	r3, r0
 8000266:	2b01      	cmp	r3, #1
 8000268:	f040 8111 	bne.w	800048e <fsm_automatic_run+0x342>
			setTimer1(250);
 800026c:	20fa      	movs	r0, #250	; 0xfa
 800026e:	f000 fe13 	bl	8000e98 <setTimer1>
			status = MAN_MODE2;
 8000272:	4b51      	ldr	r3, [pc, #324]	; (80003b8 <fsm_automatic_run+0x26c>)
 8000274:	220b      	movs	r2, #11
 8000276:	601a      	str	r2, [r3, #0]
		}
		break;
 8000278:	e109      	b.n	800048e <fsm_automatic_run+0x342>
	case AUTO_RED_YELLOW:
		setTrafficRed();
 800027a:	f000 fea3 	bl	8000fc4 <setTrafficRed>
		setTrafficYellow1();
 800027e:	f000 ff0f 	bl	80010a0 <setTrafficYellow1>
		if(timer1_flag == 1){
 8000282:	4b56      	ldr	r3, [pc, #344]	; (80003dc <fsm_automatic_run+0x290>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2b01      	cmp	r3, #1
 8000288:	d125      	bne.n	80002d6 <fsm_automatic_run+0x18a>
			status = AUTO_GREEN_RED;
 800028a:	4b4b      	ldr	r3, [pc, #300]	; (80003b8 <fsm_automatic_run+0x26c>)
 800028c:	2204      	movs	r2, #4
 800028e:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeGreen*1000);
 8000290:	4b4a      	ldr	r3, [pc, #296]	; (80003bc <fsm_automatic_run+0x270>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000298:	fb02 f303 	mul.w	r3, r2, r3
 800029c:	4618      	mov	r0, r3
 800029e:	f000 fdfb 	bl	8000e98 <setTimer1>
			timeGreen = defaultTimeGreen;
 80002a2:	4b46      	ldr	r3, [pc, #280]	; (80003bc <fsm_automatic_run+0x270>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a48      	ldr	r2, [pc, #288]	; (80003c8 <fsm_automatic_run+0x27c>)
 80002a8:	6013      	str	r3, [r2, #0]
			timeRed = defaultTimeRed;
 80002aa:	4b45      	ldr	r3, [pc, #276]	; (80003c0 <fsm_automatic_run+0x274>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a45      	ldr	r2, [pc, #276]	; (80003c4 <fsm_automatic_run+0x278>)
 80002b0:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeGreen--, timeRed--);
 80002b2:	4b45      	ldr	r3, [pc, #276]	; (80003c8 <fsm_automatic_run+0x27c>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	1e5a      	subs	r2, r3, #1
 80002b8:	4943      	ldr	r1, [pc, #268]	; (80003c8 <fsm_automatic_run+0x27c>)
 80002ba:	600a      	str	r2, [r1, #0]
 80002bc:	4a41      	ldr	r2, [pc, #260]	; (80003c4 <fsm_automatic_run+0x278>)
 80002be:	6812      	ldr	r2, [r2, #0]
 80002c0:	1e51      	subs	r1, r2, #1
 80002c2:	4840      	ldr	r0, [pc, #256]	; (80003c4 <fsm_automatic_run+0x278>)
 80002c4:	6001      	str	r1, [r0, #0]
 80002c6:	4611      	mov	r1, r2
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 fb77 	bl	80009bc <updateClockBuffer>
			setTimer2(1000);
 80002ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d2:	f000 fdfd 	bl	8000ed0 <setTimer2>
		}
		if(timer2_flag == 1){
 80002d6:	4b43      	ldr	r3, [pc, #268]	; (80003e4 <fsm_automatic_run+0x298>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d111      	bne.n	8000302 <fsm_automatic_run+0x1b6>
			updateClockBuffer(timeRed--, timeYellow--);
 80002de:	4b39      	ldr	r3, [pc, #228]	; (80003c4 <fsm_automatic_run+0x278>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	1e5a      	subs	r2, r3, #1
 80002e4:	4937      	ldr	r1, [pc, #220]	; (80003c4 <fsm_automatic_run+0x278>)
 80002e6:	600a      	str	r2, [r1, #0]
 80002e8:	4a3d      	ldr	r2, [pc, #244]	; (80003e0 <fsm_automatic_run+0x294>)
 80002ea:	6812      	ldr	r2, [r2, #0]
 80002ec:	1e51      	subs	r1, r2, #1
 80002ee:	483c      	ldr	r0, [pc, #240]	; (80003e0 <fsm_automatic_run+0x294>)
 80002f0:	6001      	str	r1, [r0, #0]
 80002f2:	4611      	mov	r1, r2
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 fb61 	bl	80009bc <updateClockBuffer>
			setTimer2(1000);
 80002fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fe:	f000 fde7 	bl	8000ed0 <setTimer2>
		}
		if(is_button_pressed(0) == 1){
 8000302:	2000      	movs	r0, #0
 8000304:	f000 fb1a 	bl	800093c <is_button_pressed>
 8000308:	4603      	mov	r3, r0
 800030a:	2b01      	cmp	r3, #1
 800030c:	f040 80c1 	bne.w	8000492 <fsm_automatic_run+0x346>
			setTimer1(250);
 8000310:	20fa      	movs	r0, #250	; 0xfa
 8000312:	f000 fdc1 	bl	8000e98 <setTimer1>
			status = MAN_MODE2;
 8000316:	4b28      	ldr	r3, [pc, #160]	; (80003b8 <fsm_automatic_run+0x26c>)
 8000318:	220b      	movs	r2, #11
 800031a:	601a      	str	r2, [r3, #0]
		}
		break;
 800031c:	e0b9      	b.n	8000492 <fsm_automatic_run+0x346>
	case AUTO_GREEN_RED:
		setTrafficGreen();
 800031e:	f000 fe67 	bl	8000ff0 <setTrafficGreen>
		setTrafficRed1();
 8000322:	f000 fe91 	bl	8001048 <setTrafficRed1>
		if(timer1_flag == 1){
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <fsm_automatic_run+0x290>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d121      	bne.n	8000372 <fsm_automatic_run+0x226>
			status = AUTO_YELLOW_RED;
 800032e:	4b22      	ldr	r3, [pc, #136]	; (80003b8 <fsm_automatic_run+0x26c>)
 8000330:	2205      	movs	r2, #5
 8000332:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeYellow*1000);
 8000334:	4b26      	ldr	r3, [pc, #152]	; (80003d0 <fsm_automatic_run+0x284>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800033c:	fb02 f303 	mul.w	r3, r2, r3
 8000340:	4618      	mov	r0, r3
 8000342:	f000 fda9 	bl	8000e98 <setTimer1>
			timeYellow = defaultTimeYellow;
 8000346:	4b22      	ldr	r3, [pc, #136]	; (80003d0 <fsm_automatic_run+0x284>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a25      	ldr	r2, [pc, #148]	; (80003e0 <fsm_automatic_run+0x294>)
 800034c:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeYellow--, timeRed--);
 800034e:	4b24      	ldr	r3, [pc, #144]	; (80003e0 <fsm_automatic_run+0x294>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	1e5a      	subs	r2, r3, #1
 8000354:	4922      	ldr	r1, [pc, #136]	; (80003e0 <fsm_automatic_run+0x294>)
 8000356:	600a      	str	r2, [r1, #0]
 8000358:	4a1a      	ldr	r2, [pc, #104]	; (80003c4 <fsm_automatic_run+0x278>)
 800035a:	6812      	ldr	r2, [r2, #0]
 800035c:	1e51      	subs	r1, r2, #1
 800035e:	4819      	ldr	r0, [pc, #100]	; (80003c4 <fsm_automatic_run+0x278>)
 8000360:	6001      	str	r1, [r0, #0]
 8000362:	4611      	mov	r1, r2
 8000364:	4618      	mov	r0, r3
 8000366:	f000 fb29 	bl	80009bc <updateClockBuffer>
			setTimer2(1000);
 800036a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800036e:	f000 fdaf 	bl	8000ed0 <setTimer2>
		}
		if(timer2_flag == 1){
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <fsm_automatic_run+0x298>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d111      	bne.n	800039e <fsm_automatic_run+0x252>
			updateClockBuffer(timeGreen--, timeRed--);
 800037a:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <fsm_automatic_run+0x27c>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	1e5a      	subs	r2, r3, #1
 8000380:	4911      	ldr	r1, [pc, #68]	; (80003c8 <fsm_automatic_run+0x27c>)
 8000382:	600a      	str	r2, [r1, #0]
 8000384:	4a0f      	ldr	r2, [pc, #60]	; (80003c4 <fsm_automatic_run+0x278>)
 8000386:	6812      	ldr	r2, [r2, #0]
 8000388:	1e51      	subs	r1, r2, #1
 800038a:	480e      	ldr	r0, [pc, #56]	; (80003c4 <fsm_automatic_run+0x278>)
 800038c:	6001      	str	r1, [r0, #0]
 800038e:	4611      	mov	r1, r2
 8000390:	4618      	mov	r0, r3
 8000392:	f000 fb13 	bl	80009bc <updateClockBuffer>
			setTimer2(1000);
 8000396:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800039a:	f000 fd99 	bl	8000ed0 <setTimer2>
		}
		if(is_button_pressed(0) == 1){
 800039e:	2000      	movs	r0, #0
 80003a0:	f000 facc 	bl	800093c <is_button_pressed>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d175      	bne.n	8000496 <fsm_automatic_run+0x34a>
			setTimer1(250);
 80003aa:	20fa      	movs	r0, #250	; 0xfa
 80003ac:	f000 fd74 	bl	8000e98 <setTimer1>
			status = MAN_MODE2;
 80003b0:	4b01      	ldr	r3, [pc, #4]	; (80003b8 <fsm_automatic_run+0x26c>)
 80003b2:	220b      	movs	r2, #11
 80003b4:	601a      	str	r2, [r3, #0]
		}
		break;
 80003b6:	e06e      	b.n	8000496 <fsm_automatic_run+0x34a>
 80003b8:	2000006c 	.word	0x2000006c
 80003bc:	20000010 	.word	0x20000010
 80003c0:	2000000c 	.word	0x2000000c
 80003c4:	20000000 	.word	0x20000000
 80003c8:	20000004 	.word	0x20000004
 80003cc:	20000018 	.word	0x20000018
 80003d0:	20000014 	.word	0x20000014
 80003d4:	20000020 	.word	0x20000020
 80003d8:	2000001c 	.word	0x2000001c
 80003dc:	200000ac 	.word	0x200000ac
 80003e0:	20000008 	.word	0x20000008
 80003e4:	200000b0 	.word	0x200000b0
	case AUTO_YELLOW_RED:
		setTrafficYellow();
 80003e8:	f000 fe18 	bl	800101c <setTrafficYellow>
		setTrafficRed1();
 80003ec:	f000 fe2c 	bl	8001048 <setTrafficRed1>
		if(timer1_flag == 1){
 80003f0:	4b2b      	ldr	r3, [pc, #172]	; (80004a0 <fsm_automatic_run+0x354>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d125      	bne.n	8000444 <fsm_automatic_run+0x2f8>
			status = AUTO_RED_GREEN;
 80003f8:	4b2a      	ldr	r3, [pc, #168]	; (80004a4 <fsm_automatic_run+0x358>)
 80003fa:	2202      	movs	r2, #2
 80003fc:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeGreen*1000);
 80003fe:	4b2a      	ldr	r3, [pc, #168]	; (80004a8 <fsm_automatic_run+0x35c>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000406:	fb02 f303 	mul.w	r3, r2, r3
 800040a:	4618      	mov	r0, r3
 800040c:	f000 fd44 	bl	8000e98 <setTimer1>
			timeRed = defaultTimeRed;
 8000410:	4b26      	ldr	r3, [pc, #152]	; (80004ac <fsm_automatic_run+0x360>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a26      	ldr	r2, [pc, #152]	; (80004b0 <fsm_automatic_run+0x364>)
 8000416:	6013      	str	r3, [r2, #0]
			timeGreen = defaultTimeGreen;
 8000418:	4b23      	ldr	r3, [pc, #140]	; (80004a8 <fsm_automatic_run+0x35c>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a25      	ldr	r2, [pc, #148]	; (80004b4 <fsm_automatic_run+0x368>)
 800041e:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeRed--, timeGreen--);
 8000420:	4b23      	ldr	r3, [pc, #140]	; (80004b0 <fsm_automatic_run+0x364>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	1e5a      	subs	r2, r3, #1
 8000426:	4922      	ldr	r1, [pc, #136]	; (80004b0 <fsm_automatic_run+0x364>)
 8000428:	600a      	str	r2, [r1, #0]
 800042a:	4a22      	ldr	r2, [pc, #136]	; (80004b4 <fsm_automatic_run+0x368>)
 800042c:	6812      	ldr	r2, [r2, #0]
 800042e:	1e51      	subs	r1, r2, #1
 8000430:	4820      	ldr	r0, [pc, #128]	; (80004b4 <fsm_automatic_run+0x368>)
 8000432:	6001      	str	r1, [r0, #0]
 8000434:	4611      	mov	r1, r2
 8000436:	4618      	mov	r0, r3
 8000438:	f000 fac0 	bl	80009bc <updateClockBuffer>
			setTimer2(1000);
 800043c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000440:	f000 fd46 	bl	8000ed0 <setTimer2>
		}
		if(timer2_flag == 1){
 8000444:	4b1c      	ldr	r3, [pc, #112]	; (80004b8 <fsm_automatic_run+0x36c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d111      	bne.n	8000470 <fsm_automatic_run+0x324>
			updateClockBuffer(timeYellow--, timeRed--);
 800044c:	4b1b      	ldr	r3, [pc, #108]	; (80004bc <fsm_automatic_run+0x370>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	1e5a      	subs	r2, r3, #1
 8000452:	491a      	ldr	r1, [pc, #104]	; (80004bc <fsm_automatic_run+0x370>)
 8000454:	600a      	str	r2, [r1, #0]
 8000456:	4a16      	ldr	r2, [pc, #88]	; (80004b0 <fsm_automatic_run+0x364>)
 8000458:	6812      	ldr	r2, [r2, #0]
 800045a:	1e51      	subs	r1, r2, #1
 800045c:	4814      	ldr	r0, [pc, #80]	; (80004b0 <fsm_automatic_run+0x364>)
 800045e:	6001      	str	r1, [r0, #0]
 8000460:	4611      	mov	r1, r2
 8000462:	4618      	mov	r0, r3
 8000464:	f000 faaa 	bl	80009bc <updateClockBuffer>
			setTimer2(1000);
 8000468:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800046c:	f000 fd30 	bl	8000ed0 <setTimer2>
		}
		if(is_button_pressed(0) == 1){
 8000470:	2000      	movs	r0, #0
 8000472:	f000 fa63 	bl	800093c <is_button_pressed>
 8000476:	4603      	mov	r3, r0
 8000478:	2b01      	cmp	r3, #1
 800047a:	d10e      	bne.n	800049a <fsm_automatic_run+0x34e>
			setTimer1(250);
 800047c:	20fa      	movs	r0, #250	; 0xfa
 800047e:	f000 fd0b 	bl	8000e98 <setTimer1>
			status = MAN_MODE2;
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <fsm_automatic_run+0x358>)
 8000484:	220b      	movs	r2, #11
 8000486:	601a      	str	r2, [r3, #0]
		}
		break;
 8000488:	e007      	b.n	800049a <fsm_automatic_run+0x34e>
	default:
		break;
 800048a:	bf00      	nop
 800048c:	e006      	b.n	800049c <fsm_automatic_run+0x350>
		break;
 800048e:	bf00      	nop
 8000490:	e004      	b.n	800049c <fsm_automatic_run+0x350>
		break;
 8000492:	bf00      	nop
 8000494:	e002      	b.n	800049c <fsm_automatic_run+0x350>
		break;
 8000496:	bf00      	nop
 8000498:	e000      	b.n	800049c <fsm_automatic_run+0x350>
		break;
 800049a:	bf00      	nop
	}
}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	200000ac 	.word	0x200000ac
 80004a4:	2000006c 	.word	0x2000006c
 80004a8:	20000010 	.word	0x20000010
 80004ac:	2000000c 	.word	0x2000000c
 80004b0:	20000000 	.word	0x20000000
 80004b4:	20000004 	.word	0x20000004
 80004b8:	200000b0 	.word	0x200000b0
 80004bc:	20000008 	.word	0x20000008

080004c0 <fsm_manual_run>:
 *      Author: Acer
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	switch(status){
 80004c4:	4b75      	ldr	r3, [pc, #468]	; (800069c <fsm_manual_run+0x1dc>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	3b0a      	subs	r3, #10
 80004ca:	2b03      	cmp	r3, #3
 80004cc:	f200 80e2 	bhi.w	8000694 <fsm_manual_run+0x1d4>
 80004d0:	a201      	add	r2, pc, #4	; (adr r2, 80004d8 <fsm_manual_run+0x18>)
 80004d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d6:	bf00      	nop
 80004d8:	080004e9 	.word	0x080004e9
 80004dc:	080004f1 	.word	0x080004f1
 80004e0:	08000569 	.word	0x08000569
 80004e4:	080005df 	.word	0x080005df
	case MAN_MODE1:
		status = INIT;
 80004e8:	4b6c      	ldr	r3, [pc, #432]	; (800069c <fsm_manual_run+0x1dc>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	601a      	str	r2, [r3, #0]
		break;
 80004ee:	e0d2      	b.n	8000696 <fsm_manual_run+0x1d6>
	case MAN_MODE2:
		setTrafficRed1();
 80004f0:	f000 fdaa 	bl	8001048 <setTrafficRed1>
		setTrafficRed();
 80004f4:	f000 fd66 	bl	8000fc4 <setTrafficRed>
		if(is_button_pressed(0) == 1){
 80004f8:	2000      	movs	r0, #0
 80004fa:	f000 fa1f 	bl	800093c <is_button_pressed>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b01      	cmp	r3, #1
 8000502:	d105      	bne.n	8000510 <fsm_manual_run+0x50>
			status = MAN_MODE3;
 8000504:	4b65      	ldr	r3, [pc, #404]	; (800069c <fsm_manual_run+0x1dc>)
 8000506:	220c      	movs	r2, #12
 8000508:	601a      	str	r2, [r3, #0]
			setTimer1(250);
 800050a:	20fa      	movs	r0, #250	; 0xfa
 800050c:	f000 fcc4 	bl	8000e98 <setTimer1>
		}
		//linking red led
		if(timer1_flag == 1){
 8000510:	4b63      	ldr	r3, [pc, #396]	; (80006a0 <fsm_manual_run+0x1e0>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d10b      	bne.n	8000530 <fsm_manual_run+0x70>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000518:	2120      	movs	r1, #32
 800051a:	4862      	ldr	r0, [pc, #392]	; (80006a4 <fsm_manual_run+0x1e4>)
 800051c:	f001 f915 	bl	800174a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000520:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000524:	485f      	ldr	r0, [pc, #380]	; (80006a4 <fsm_manual_run+0x1e4>)
 8000526:	f001 f910 	bl	800174a <HAL_GPIO_TogglePin>
			setTimer1(250);
 800052a:	20fa      	movs	r0, #250	; 0xfa
 800052c:	f000 fcb4 	bl	8000e98 <setTimer1>
		}
		if(is_button_pressed(1) == 1){
 8000530:	2001      	movs	r0, #1
 8000532:	f000 fa03 	bl	800093c <is_button_pressed>
 8000536:	4603      	mov	r3, r0
 8000538:	2b01      	cmp	r3, #1
 800053a:	d104      	bne.n	8000546 <fsm_manual_run+0x86>
			tempRed++;
 800053c:	4b5a      	ldr	r3, [pc, #360]	; (80006a8 <fsm_manual_run+0x1e8>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	3301      	adds	r3, #1
 8000542:	4a59      	ldr	r2, [pc, #356]	; (80006a8 <fsm_manual_run+0x1e8>)
 8000544:	6013      	str	r3, [r2, #0]
		}
		if(is_button_pressed(2) == 1){
 8000546:	2002      	movs	r0, #2
 8000548:	f000 f9f8 	bl	800093c <is_button_pressed>
 800054c:	4603      	mov	r3, r0
 800054e:	2b01      	cmp	r3, #1
 8000550:	d103      	bne.n	800055a <fsm_manual_run+0x9a>
			defaultTimeRed = tempRed ;
 8000552:	4b55      	ldr	r3, [pc, #340]	; (80006a8 <fsm_manual_run+0x1e8>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a55      	ldr	r2, [pc, #340]	; (80006ac <fsm_manual_run+0x1ec>)
 8000558:	6013      	str	r3, [r2, #0]
		}
		updateClockBuffer(1, defaultTimeRed);
 800055a:	4b54      	ldr	r3, [pc, #336]	; (80006ac <fsm_manual_run+0x1ec>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4619      	mov	r1, r3
 8000560:	2001      	movs	r0, #1
 8000562:	f000 fa2b 	bl	80009bc <updateClockBuffer>
		break;
 8000566:	e096      	b.n	8000696 <fsm_manual_run+0x1d6>
	case MAN_MODE3:
		setTrafficYellow();
 8000568:	f000 fd58 	bl	800101c <setTrafficYellow>
		setTrafficYellow1();
 800056c:	f000 fd98 	bl	80010a0 <setTrafficYellow1>
		if(is_button_pressed(0) == 1){
 8000570:	2000      	movs	r0, #0
 8000572:	f000 f9e3 	bl	800093c <is_button_pressed>
 8000576:	4603      	mov	r3, r0
 8000578:	2b01      	cmp	r3, #1
 800057a:	d105      	bne.n	8000588 <fsm_manual_run+0xc8>
			status = MAN_MODE4;
 800057c:	4b47      	ldr	r3, [pc, #284]	; (800069c <fsm_manual_run+0x1dc>)
 800057e:	220d      	movs	r2, #13
 8000580:	601a      	str	r2, [r3, #0]
			setTimer1(250);
 8000582:	20fa      	movs	r0, #250	; 0xfa
 8000584:	f000 fc88 	bl	8000e98 <setTimer1>
		}
		if(timer1_flag == 1){
 8000588:	4b45      	ldr	r3, [pc, #276]	; (80006a0 <fsm_manual_run+0x1e0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d10a      	bne.n	80005a6 <fsm_manual_run+0xe6>
			HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000590:	2180      	movs	r1, #128	; 0x80
 8000592:	4844      	ldr	r0, [pc, #272]	; (80006a4 <fsm_manual_run+0x1e4>)
 8000594:	f001 f8d9 	bl	800174a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000598:	2110      	movs	r1, #16
 800059a:	4842      	ldr	r0, [pc, #264]	; (80006a4 <fsm_manual_run+0x1e4>)
 800059c:	f001 f8d5 	bl	800174a <HAL_GPIO_TogglePin>
			setTimer1(250);
 80005a0:	20fa      	movs	r0, #250	; 0xfa
 80005a2:	f000 fc79 	bl	8000e98 <setTimer1>
		}
		if(is_button_pressed(1) == 1){
 80005a6:	2001      	movs	r0, #1
 80005a8:	f000 f9c8 	bl	800093c <is_button_pressed>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d104      	bne.n	80005bc <fsm_manual_run+0xfc>
			tempYellow++;
 80005b2:	4b3f      	ldr	r3, [pc, #252]	; (80006b0 <fsm_manual_run+0x1f0>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	3301      	adds	r3, #1
 80005b8:	4a3d      	ldr	r2, [pc, #244]	; (80006b0 <fsm_manual_run+0x1f0>)
 80005ba:	6013      	str	r3, [r2, #0]
		}
		if(is_button_pressed(2) == 1){
 80005bc:	2002      	movs	r0, #2
 80005be:	f000 f9bd 	bl	800093c <is_button_pressed>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d103      	bne.n	80005d0 <fsm_manual_run+0x110>
			defaultTimeYellow = tempYellow ;
 80005c8:	4b39      	ldr	r3, [pc, #228]	; (80006b0 <fsm_manual_run+0x1f0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a39      	ldr	r2, [pc, #228]	; (80006b4 <fsm_manual_run+0x1f4>)
 80005ce:	6013      	str	r3, [r2, #0]
		}
		updateClockBuffer(3, defaultTimeYellow);
 80005d0:	4b38      	ldr	r3, [pc, #224]	; (80006b4 <fsm_manual_run+0x1f4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	2003      	movs	r0, #3
 80005d8:	f000 f9f0 	bl	80009bc <updateClockBuffer>
		break;
 80005dc:	e05b      	b.n	8000696 <fsm_manual_run+0x1d6>
	case MAN_MODE4:
		if(is_button_pressed(0) == 1){
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 f9ac 	bl	800093c <is_button_pressed>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d125      	bne.n	8000636 <fsm_manual_run+0x176>
			setTimer1(defaultTimeGreen*1000);
 80005ea:	4b33      	ldr	r3, [pc, #204]	; (80006b8 <fsm_manual_run+0x1f8>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005f2:	fb02 f303 	mul.w	r3, r2, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 fc4e 	bl	8000e98 <setTimer1>
			setTimer2(1000);
 80005fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000600:	f000 fc66 	bl	8000ed0 <setTimer2>
			timeRed = defaultTimeRed;
 8000604:	4b29      	ldr	r3, [pc, #164]	; (80006ac <fsm_manual_run+0x1ec>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a2c      	ldr	r2, [pc, #176]	; (80006bc <fsm_manual_run+0x1fc>)
 800060a:	6013      	str	r3, [r2, #0]
			timeGreen = defaultTimeGreen;
 800060c:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <fsm_manual_run+0x1f8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a2b      	ldr	r2, [pc, #172]	; (80006c0 <fsm_manual_run+0x200>)
 8000612:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeRed--, timeGreen--);
 8000614:	4b29      	ldr	r3, [pc, #164]	; (80006bc <fsm_manual_run+0x1fc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	1e5a      	subs	r2, r3, #1
 800061a:	4928      	ldr	r1, [pc, #160]	; (80006bc <fsm_manual_run+0x1fc>)
 800061c:	600a      	str	r2, [r1, #0]
 800061e:	4a28      	ldr	r2, [pc, #160]	; (80006c0 <fsm_manual_run+0x200>)
 8000620:	6812      	ldr	r2, [r2, #0]
 8000622:	1e51      	subs	r1, r2, #1
 8000624:	4826      	ldr	r0, [pc, #152]	; (80006c0 <fsm_manual_run+0x200>)
 8000626:	6001      	str	r1, [r0, #0]
 8000628:	4611      	mov	r1, r2
 800062a:	4618      	mov	r0, r3
 800062c:	f000 f9c6 	bl	80009bc <updateClockBuffer>
			status = AUTO_RED_GREEN;
 8000630:	4b1a      	ldr	r3, [pc, #104]	; (800069c <fsm_manual_run+0x1dc>)
 8000632:	2202      	movs	r2, #2
 8000634:	601a      	str	r2, [r3, #0]
		}
		setTrafficGreen();
 8000636:	f000 fcdb 	bl	8000ff0 <setTrafficGreen>
		setTrafficGreen1();
 800063a:	f000 fd1b 	bl	8001074 <setTrafficGreen1>
		if(timer1_flag == 1){
 800063e:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <fsm_manual_run+0x1e0>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d10a      	bne.n	800065c <fsm_manual_run+0x19c>
			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8000646:	2140      	movs	r1, #64	; 0x40
 8000648:	4816      	ldr	r0, [pc, #88]	; (80006a4 <fsm_manual_run+0x1e4>)
 800064a:	f001 f87e 	bl	800174a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800064e:	2108      	movs	r1, #8
 8000650:	4814      	ldr	r0, [pc, #80]	; (80006a4 <fsm_manual_run+0x1e4>)
 8000652:	f001 f87a 	bl	800174a <HAL_GPIO_TogglePin>
			setTimer1(250);
 8000656:	20fa      	movs	r0, #250	; 0xfa
 8000658:	f000 fc1e 	bl	8000e98 <setTimer1>
		}
			if(is_button_pressed(1) == 1){
 800065c:	2001      	movs	r0, #1
 800065e:	f000 f96d 	bl	800093c <is_button_pressed>
 8000662:	4603      	mov	r3, r0
 8000664:	2b01      	cmp	r3, #1
 8000666:	d104      	bne.n	8000672 <fsm_manual_run+0x1b2>
				tempGreen++;
 8000668:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <fsm_manual_run+0x204>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	3301      	adds	r3, #1
 800066e:	4a15      	ldr	r2, [pc, #84]	; (80006c4 <fsm_manual_run+0x204>)
 8000670:	6013      	str	r3, [r2, #0]
			}
			if(is_button_pressed(2) == 1){
 8000672:	2002      	movs	r0, #2
 8000674:	f000 f962 	bl	800093c <is_button_pressed>
 8000678:	4603      	mov	r3, r0
 800067a:	2b01      	cmp	r3, #1
 800067c:	d103      	bne.n	8000686 <fsm_manual_run+0x1c6>
				defaultTimeGreen = tempGreen ;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <fsm_manual_run+0x204>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a0d      	ldr	r2, [pc, #52]	; (80006b8 <fsm_manual_run+0x1f8>)
 8000684:	6013      	str	r3, [r2, #0]
			}
		updateClockBuffer(4, defaultTimeGreen);
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <fsm_manual_run+0x1f8>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4619      	mov	r1, r3
 800068c:	2004      	movs	r0, #4
 800068e:	f000 f995 	bl	80009bc <updateClockBuffer>
		break;
 8000692:	e000      	b.n	8000696 <fsm_manual_run+0x1d6>
	default:
			break;
 8000694:	bf00      	nop
	}
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	2000006c 	.word	0x2000006c
 80006a0:	200000ac 	.word	0x200000ac
 80006a4:	40010800 	.word	0x40010800
 80006a8:	20000018 	.word	0x20000018
 80006ac:	2000000c 	.word	0x2000000c
 80006b0:	20000020 	.word	0x20000020
 80006b4:	20000014 	.word	0x20000014
 80006b8:	20000010 	.word	0x20000010
 80006bc:	20000000 	.word	0x20000000
 80006c0:	20000004 	.word	0x20000004
 80006c4:	2000001c 	.word	0x2000001c

080006c8 <getKeyProcess>:
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
static int buttonState[N0_OF_BUTTONS] = {BUTTON_IS_RELEASED, BUTTON_IS_RELEASED, BUTTON_IS_RELEASED};
static int button_flag[N0_OF_BUTTONS];
void getKeyProcess(int index){// turn on button_flag
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < N0_OF_BUTTONS){
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	db07      	blt.n	80006e6 <getKeyProcess+0x1e>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	dc04      	bgt.n	80006e6 <getKeyProcess+0x1e>
		button_flag[index] = 1;
 80006dc:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <getKeyProcess+0x28>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2101      	movs	r1, #1
 80006e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	2000008c 	.word	0x2000008c

080006f4 <get1sFlag>:
void get1sFlag(int index){
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < N0_OF_BUTTONS){
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	db07      	blt.n	8000712 <get1sFlag+0x1e>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2b02      	cmp	r3, #2
 8000706:	dc04      	bgt.n	8000712 <get1sFlag+0x1e>
			flagForButtonPress1s[index] = 1;
 8000708:	4a04      	ldr	r2, [pc, #16]	; (800071c <get1sFlag+0x28>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
		}
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	20000080 	.word	0x20000080

08000720 <fsm_input_processing>:
void fsm_input_processing(GPIO_PinState buttonBuffer[], int index){
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
	switch(buttonState[index]){
 800072a:	4a4b      	ldr	r2, [pc, #300]	; (8000858 <fsm_input_processing+0x138>)
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000732:	2b02      	cmp	r3, #2
 8000734:	d04d      	beq.n	80007d2 <fsm_input_processing+0xb2>
 8000736:	2b02      	cmp	r3, #2
 8000738:	f300 8082 	bgt.w	8000840 <fsm_input_processing+0x120>
 800073c:	2b00      	cmp	r3, #0
 800073e:	d002      	beq.n	8000746 <fsm_input_processing+0x26>
 8000740:	2b01      	cmp	r3, #1
 8000742:	d037      	beq.n	80007b4 <fsm_input_processing+0x94>
			buttonState[index] = BUTTON_IS_RELEASED;
			counterForButtonPress1s[index] = 0;
		}
		break;
	default:
		break;
 8000744:	e07c      	b.n	8000840 <fsm_input_processing+0x120>
		if(counterForButtonPress1s[index] < DURATION_FOR_AUTO_INCREASING){
 8000746:	4a45      	ldr	r2, [pc, #276]	; (800085c <fsm_input_processing+0x13c>)
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800074e:	2b63      	cmp	r3, #99	; 0x63
 8000750:	d81f      	bhi.n	8000792 <fsm_input_processing+0x72>
			counterForButtonPress1s[index]++;
 8000752:	4a42      	ldr	r2, [pc, #264]	; (800085c <fsm_input_processing+0x13c>)
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800075a:	3301      	adds	r3, #1
 800075c:	b299      	uxth	r1, r3
 800075e:	4a3f      	ldr	r2, [pc, #252]	; (800085c <fsm_input_processing+0x13c>)
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(counterForButtonPress1s[index] == DURATION_FOR_AUTO_INCREASING){
 8000766:	4a3d      	ldr	r2, [pc, #244]	; (800085c <fsm_input_processing+0x13c>)
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800076e:	2b64      	cmp	r3, #100	; 0x64
 8000770:	d10f      	bne.n	8000792 <fsm_input_processing+0x72>
				buttonState[index] = BUTTON_PRESSED_MORE_THAN_1s;
 8000772:	4a39      	ldr	r2, [pc, #228]	; (8000858 <fsm_input_processing+0x138>)
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	2102      	movs	r1, #2
 8000778:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				counterForButtonPress1s[index] = 0;
 800077c:	4a37      	ldr	r2, [pc, #220]	; (800085c <fsm_input_processing+0x13c>)
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	2100      	movs	r1, #0
 8000782:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				getKeyProcess(index);
 8000786:	6838      	ldr	r0, [r7, #0]
 8000788:	f7ff ff9e 	bl	80006c8 <getKeyProcess>
				get1sFlag(index);
 800078c:	6838      	ldr	r0, [r7, #0]
 800078e:	f7ff ffb1 	bl	80006f4 <get1sFlag>
		if(buttonBuffer[index] == BUTTON_RELEASED){
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	4413      	add	r3, r2
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d152      	bne.n	8000844 <fsm_input_processing+0x124>
			buttonState[index] = BUTTON_IS_RELEASED;
 800079e:	4a2e      	ldr	r2, [pc, #184]	; (8000858 <fsm_input_processing+0x138>)
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	2101      	movs	r1, #1
 80007a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress1s[index] = 0;
 80007a8:	4a2c      	ldr	r2, [pc, #176]	; (800085c <fsm_input_processing+0x13c>)
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	2100      	movs	r1, #0
 80007ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		break;
 80007b2:	e047      	b.n	8000844 <fsm_input_processing+0x124>
		if(buttonBuffer[index] == BUTTON_PRESSED){
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d143      	bne.n	8000848 <fsm_input_processing+0x128>
			buttonState[index] = BUTTON_IS_PRESSED;
 80007c0:	4a25      	ldr	r2, [pc, #148]	; (8000858 <fsm_input_processing+0x138>)
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	2100      	movs	r1, #0
 80007c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			getKeyProcess(index);
 80007ca:	6838      	ldr	r0, [r7, #0]
 80007cc:	f7ff ff7c 	bl	80006c8 <getKeyProcess>
		break;
 80007d0:	e03a      	b.n	8000848 <fsm_input_processing+0x128>
		if(counterForButtonPress1s[index] < DURATION_FOR_AUTO_INCREASING){
 80007d2:	4a22      	ldr	r2, [pc, #136]	; (800085c <fsm_input_processing+0x13c>)
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007da:	2b63      	cmp	r3, #99	; 0x63
 80007dc:	d81f      	bhi.n	800081e <fsm_input_processing+0xfe>
					counterForButtonPress1s[index]++;
 80007de:	4a1f      	ldr	r2, [pc, #124]	; (800085c <fsm_input_processing+0x13c>)
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007e6:	3301      	adds	r3, #1
 80007e8:	b299      	uxth	r1, r3
 80007ea:	4a1c      	ldr	r2, [pc, #112]	; (800085c <fsm_input_processing+0x13c>)
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if(counterForButtonPress1s[index] == DURATION_FOR_AUTO_INCREASING){
 80007f2:	4a1a      	ldr	r2, [pc, #104]	; (800085c <fsm_input_processing+0x13c>)
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007fa:	2b64      	cmp	r3, #100	; 0x64
 80007fc:	d10f      	bne.n	800081e <fsm_input_processing+0xfe>
						buttonState[index] = BUTTON_PRESSED_MORE_THAN_1s;
 80007fe:	4a16      	ldr	r2, [pc, #88]	; (8000858 <fsm_input_processing+0x138>)
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	2102      	movs	r1, #2
 8000804:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						counterForButtonPress1s[index] = 0;
 8000808:	4a14      	ldr	r2, [pc, #80]	; (800085c <fsm_input_processing+0x13c>)
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	2100      	movs	r1, #0
 800080e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						getKeyProcess(index);
 8000812:	6838      	ldr	r0, [r7, #0]
 8000814:	f7ff ff58 	bl	80006c8 <getKeyProcess>
						get1sFlag(index);
 8000818:	6838      	ldr	r0, [r7, #0]
 800081a:	f7ff ff6b 	bl	80006f4 <get1sFlag>
		if(buttonBuffer[index] == BUTTON_RELEASED){
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	4413      	add	r3, r2
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d110      	bne.n	800084c <fsm_input_processing+0x12c>
			buttonState[index] = BUTTON_IS_RELEASED;
 800082a:	4a0b      	ldr	r2, [pc, #44]	; (8000858 <fsm_input_processing+0x138>)
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	2101      	movs	r1, #1
 8000830:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress1s[index] = 0;
 8000834:	4a09      	ldr	r2, [pc, #36]	; (800085c <fsm_input_processing+0x13c>)
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	2100      	movs	r1, #0
 800083a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		break;
 800083e:	e005      	b.n	800084c <fsm_input_processing+0x12c>
		break;
 8000840:	bf00      	nop
 8000842:	e004      	b.n	800084e <fsm_input_processing+0x12e>
		break;
 8000844:	bf00      	nop
 8000846:	e002      	b.n	800084e <fsm_input_processing+0x12e>
		break;
 8000848:	bf00      	nop
 800084a:	e000      	b.n	800084e <fsm_input_processing+0x12e>
		break;
 800084c:	bf00      	nop
	}
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000024 	.word	0x20000024
 800085c:	20000084 	.word	0x20000084

08000860 <button_reading>:
void button_reading(void){
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i++){
 8000866:	2300      	movs	r3, #0
 8000868:	71fb      	strb	r3, [r7, #7]
 800086a:	e055      	b.n	8000918 <button_reading+0xb8>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 800086c:	79fa      	ldrb	r2, [r7, #7]
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	492d      	ldr	r1, [pc, #180]	; (8000928 <button_reading+0xc8>)
 8000872:	5c89      	ldrb	r1, [r1, r2]
 8000874:	4a2d      	ldr	r2, [pc, #180]	; (800092c <button_reading+0xcc>)
 8000876:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000878:	79fa      	ldrb	r2, [r7, #7]
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	492c      	ldr	r1, [pc, #176]	; (8000930 <button_reading+0xd0>)
 800087e:	5c89      	ldrb	r1, [r1, r2]
 8000880:	4a29      	ldr	r2, [pc, #164]	; (8000928 <button_reading+0xc8>)
 8000882:	54d1      	strb	r1, [r2, r3]
		// Chosing Which button is pressed.
		switch(i){
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	2b02      	cmp	r3, #2
 8000888:	d01c      	beq.n	80008c4 <button_reading+0x64>
 800088a:	2b02      	cmp	r3, #2
 800088c:	dc25      	bgt.n	80008da <button_reading+0x7a>
 800088e:	2b00      	cmp	r3, #0
 8000890:	d002      	beq.n	8000898 <button_reading+0x38>
 8000892:	2b01      	cmp	r3, #1
 8000894:	d00b      	beq.n	80008ae <button_reading+0x4e>
			break;
		case 2://  read signal from button0
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
			break;
		default:
			break;
 8000896:	e020      	b.n	80008da <button_reading+0x7a>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port, BUTTON_0_Pin);
 8000898:	79fc      	ldrb	r4, [r7, #7]
 800089a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800089e:	4825      	ldr	r0, [pc, #148]	; (8000934 <button_reading+0xd4>)
 80008a0:	f000 ff24 	bl	80016ec <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	461a      	mov	r2, r3
 80008a8:	4b21      	ldr	r3, [pc, #132]	; (8000930 <button_reading+0xd0>)
 80008aa:	551a      	strb	r2, [r3, r4]
			break;
 80008ac:	e016      	b.n	80008dc <button_reading+0x7c>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80008ae:	79fc      	ldrb	r4, [r7, #7]
 80008b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b4:	481f      	ldr	r0, [pc, #124]	; (8000934 <button_reading+0xd4>)
 80008b6:	f000 ff19 	bl	80016ec <HAL_GPIO_ReadPin>
 80008ba:	4603      	mov	r3, r0
 80008bc:	461a      	mov	r2, r3
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <button_reading+0xd0>)
 80008c0:	551a      	strb	r2, [r3, r4]
			break;
 80008c2:	e00b      	b.n	80008dc <button_reading+0x7c>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 80008c4:	79fc      	ldrb	r4, [r7, #7]
 80008c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ca:	481a      	ldr	r0, [pc, #104]	; (8000934 <button_reading+0xd4>)
 80008cc:	f000 ff0e 	bl	80016ec <HAL_GPIO_ReadPin>
 80008d0:	4603      	mov	r3, r0
 80008d2:	461a      	mov	r2, r3
 80008d4:	4b16      	ldr	r3, [pc, #88]	; (8000930 <button_reading+0xd0>)
 80008d6:	551a      	strb	r2, [r3, r4]
			break;
 80008d8:	e000      	b.n	80008dc <button_reading+0x7c>
			break;
 80008da:	bf00      	nop
		}
		if((debounceButtonBuffer3[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer2[i] == debounceButtonBuffer1[i])){
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	4a13      	ldr	r2, [pc, #76]	; (800092c <button_reading+0xcc>)
 80008e0:	5cd2      	ldrb	r2, [r2, r3]
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	4910      	ldr	r1, [pc, #64]	; (8000928 <button_reading+0xc8>)
 80008e6:	5ccb      	ldrb	r3, [r1, r3]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d112      	bne.n	8000912 <button_reading+0xb2>
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <button_reading+0xc8>)
 80008f0:	5cd2      	ldrb	r2, [r2, r3]
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	490e      	ldr	r1, [pc, #56]	; (8000930 <button_reading+0xd0>)
 80008f6:	5ccb      	ldrb	r3, [r1, r3]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d10a      	bne.n	8000912 <button_reading+0xb2>
			buttonBuffer[i] = debounceButtonBuffer3[i];
 80008fc:	79fa      	ldrb	r2, [r7, #7]
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	490a      	ldr	r1, [pc, #40]	; (800092c <button_reading+0xcc>)
 8000902:	5c89      	ldrb	r1, [r1, r2]
 8000904:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <button_reading+0xd8>)
 8000906:	54d1      	strb	r1, [r2, r3]
			fsm_input_processing(buttonBuffer,i);
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	4619      	mov	r1, r3
 800090c:	480a      	ldr	r0, [pc, #40]	; (8000938 <button_reading+0xd8>)
 800090e:	f7ff ff07 	bl	8000720 <fsm_input_processing>
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i++){
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	3301      	adds	r3, #1
 8000916:	71fb      	strb	r3, [r7, #7]
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	2b02      	cmp	r3, #2
 800091c:	d9a6      	bls.n	800086c <button_reading+0xc>
		}

	}
}
 800091e:	bf00      	nop
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bd90      	pop	{r4, r7, pc}
 8000928:	20000078 	.word	0x20000078
 800092c:	2000007c 	.word	0x2000007c
 8000930:	20000074 	.word	0x20000074
 8000934:	40010800 	.word	0x40010800
 8000938:	20000070 	.word	0x20000070

0800093c <is_button_pressed>:
int is_button_pressed(uint8_t index){
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	2b02      	cmp	r3, #2
 800094a:	d901      	bls.n	8000950 <is_button_pressed+0x14>
 800094c:	2300      	movs	r3, #0
 800094e:	e00d      	b.n	800096c <is_button_pressed+0x30>
	if(button_flag[index] == 1){
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	4a09      	ldr	r2, [pc, #36]	; (8000978 <is_button_pressed+0x3c>)
 8000954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d106      	bne.n	800096a <is_button_pressed+0x2e>
		//set button flag value = 0
		button_flag[index] = 0;
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	4a06      	ldr	r2, [pc, #24]	; (8000978 <is_button_pressed+0x3c>)
 8000960:	2100      	movs	r1, #0
 8000962:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000966:	2301      	movs	r3, #1
 8000968:	e000      	b.n	800096c <is_button_pressed+0x30>
	}
	return 0;
 800096a:	2300      	movs	r3, #0
}
 800096c:	4618      	mov	r0, r3
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	2000008c 	.word	0x2000008c

0800097c <display7SEG>:
#include "led_display.h"

uint16_t led_matrix[MAX_MATRIX] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7D, 0x07, 0x7F, 0x6f};
int index_led = 0;
int led_buffer[MAX_BUFF] = {0,0,0,0};
void display7SEG(int number){
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	uint16_t bit_var = led_matrix[number];
 8000984:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <display7SEG+0x38>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800098c:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOB, bit_var, RESET);
 800098e:	89fb      	ldrh	r3, [r7, #14]
 8000990:	2200      	movs	r2, #0
 8000992:	4619      	mov	r1, r3
 8000994:	4808      	ldr	r0, [pc, #32]	; (80009b8 <display7SEG+0x3c>)
 8000996:	f000 fec0 	bl	800171a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ~bit_var, SET);
 800099a:	89fb      	ldrh	r3, [r7, #14]
 800099c:	43db      	mvns	r3, r3
 800099e:	b29b      	uxth	r3, r3
 80009a0:	2201      	movs	r2, #1
 80009a2:	4619      	mov	r1, r3
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <display7SEG+0x3c>)
 80009a6:	f000 feb8 	bl	800171a <HAL_GPIO_WritePin>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000030 	.word	0x20000030
 80009b8:	40010c00 	.word	0x40010c00

080009bc <updateClockBuffer>:
void updateClockBuffer(int counter1, int counter2){
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]

	    led_buffer[0] = counter1 / 10;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a18      	ldr	r2, [pc, #96]	; (8000a2c <updateClockBuffer+0x70>)
 80009ca:	fb82 1203 	smull	r1, r2, r2, r3
 80009ce:	1092      	asrs	r2, r2, #2
 80009d0:	17db      	asrs	r3, r3, #31
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	4a16      	ldr	r2, [pc, #88]	; (8000a30 <updateClockBuffer+0x74>)
 80009d6:	6013      	str	r3, [r2, #0]
		led_buffer[1] = counter1 % 10;
 80009d8:	6879      	ldr	r1, [r7, #4]
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <updateClockBuffer+0x70>)
 80009dc:	fb83 2301 	smull	r2, r3, r3, r1
 80009e0:	109a      	asrs	r2, r3, #2
 80009e2:	17cb      	asrs	r3, r1, #31
 80009e4:	1ad2      	subs	r2, r2, r3
 80009e6:	4613      	mov	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4413      	add	r3, r2
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	1aca      	subs	r2, r1, r3
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <updateClockBuffer+0x74>)
 80009f2:	605a      	str	r2, [r3, #4]
		led_buffer[2] = counter2 / 10;
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	4a0d      	ldr	r2, [pc, #52]	; (8000a2c <updateClockBuffer+0x70>)
 80009f8:	fb82 1203 	smull	r1, r2, r2, r3
 80009fc:	1092      	asrs	r2, r2, #2
 80009fe:	17db      	asrs	r3, r3, #31
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <updateClockBuffer+0x74>)
 8000a04:	6093      	str	r3, [r2, #8]
		led_buffer[3] = counter2 % 10;
 8000a06:	6839      	ldr	r1, [r7, #0]
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <updateClockBuffer+0x70>)
 8000a0a:	fb83 2301 	smull	r2, r3, r3, r1
 8000a0e:	109a      	asrs	r2, r3, #2
 8000a10:	17cb      	asrs	r3, r1, #31
 8000a12:	1ad2      	subs	r2, r2, r3
 8000a14:	4613      	mov	r3, r2
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	4413      	add	r3, r2
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	1aca      	subs	r2, r1, r3
 8000a1e:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <updateClockBuffer+0x74>)
 8000a20:	60da      	str	r2, [r3, #12]
 }
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	66666667 	.word	0x66666667
 8000a30:	2000009c 	.word	0x2000009c

08000a34 <update7SEG>:

void update7SEG(int index){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b03      	cmp	r3, #3
 8000a40:	d852      	bhi.n	8000ae8 <update7SEG+0xb4>
 8000a42:	a201      	add	r2, pc, #4	; (adr r2, 8000a48 <update7SEG+0x14>)
 8000a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a48:	08000a59 	.word	0x08000a59
 8000a4c:	08000a7d 	.word	0x08000a7d
 8000a50:	08000aa1 	.word	0x08000aa1
 8000a54:	08000ac5 	.word	0x08000ac5
	switch(index){
	case 0:
		// Display the first 7 SEG with led_buffer [0]
		HAL_GPIO_WritePin(GPIOA, EN0_Pin, RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a5e:	4825      	ldr	r0, [pc, #148]	; (8000af4 <update7SEG+0xc0>)
 8000a60:	f000 fe5b 	bl	800171a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000a6a:	4822      	ldr	r0, [pc, #136]	; (8000af4 <update7SEG+0xc0>)
 8000a6c:	f000 fe55 	bl	800171a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 8000a70:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <update7SEG+0xc4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ff81 	bl	800097c <display7SEG>
		break;
 8000a7a:	e036      	b.n	8000aea <update7SEG+0xb6>
	case 1:
		// Display the second 7 SEG with led_buffer [1]
		HAL_GPIO_WritePin(GPIOA, EN1_Pin, RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a82:	481c      	ldr	r0, [pc, #112]	; (8000af4 <update7SEG+0xc0>)
 8000a84:	f000 fe49 	bl	800171a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 8000a8e:	4819      	ldr	r0, [pc, #100]	; (8000af4 <update7SEG+0xc0>)
 8000a90:	f000 fe43 	bl	800171a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <update7SEG+0xc4>)
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ff6f 	bl	800097c <display7SEG>
		break;
 8000a9e:	e024      	b.n	8000aea <update7SEG+0xb6>
	case 2:
		// Display the third 7 SEG with led_buffer [2]
		HAL_GPIO_WritePin(GPIOA, EN2_Pin, RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa6:	4813      	ldr	r0, [pc, #76]	; (8000af4 <update7SEG+0xc0>)
 8000aa8:	f000 fe37 	bl	800171a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 8000ab2:	4810      	ldr	r0, [pc, #64]	; (8000af4 <update7SEG+0xc0>)
 8000ab4:	f000 fe31 	bl	800171a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <update7SEG+0xc4>)
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff5d 	bl	800097c <display7SEG>
		break;
 8000ac2:	e012      	b.n	8000aea <update7SEG+0xb6>
	case 3:
		// Display the forth 7 SEG with led_buffer [3]
		HAL_GPIO_WritePin(GPIOA, EN3_Pin, RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aca:	480a      	ldr	r0, [pc, #40]	; (8000af4 <update7SEG+0xc0>)
 8000acc:	f000 fe25 	bl	800171a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin| EN1_Pin | EN2_Pin , SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000ad6:	4807      	ldr	r0, [pc, #28]	; (8000af4 <update7SEG+0xc0>)
 8000ad8:	f000 fe1f 	bl	800171a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <update7SEG+0xc4>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff4b 	bl	800097c <display7SEG>
		break;
 8000ae6:	e000      	b.n	8000aea <update7SEG+0xb6>
	default:
		break;
 8000ae8:	bf00      	nop
	}
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40010800 	.word	0x40010800
 8000af8:	2000009c 	.word	0x2000009c

08000afc <scanLed>:

void scanLed(){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	// display time in LED 7 SEGMENT
	if(timer3_flag == 1){
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <scanLed+0x34>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d111      	bne.n	8000b2c <scanLed+0x30>
		update7SEG(index_led++);
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <scanLed+0x38>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	1c5a      	adds	r2, r3, #1
 8000b0e:	4909      	ldr	r1, [pc, #36]	; (8000b34 <scanLed+0x38>)
 8000b10:	600a      	str	r2, [r1, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff8e 	bl	8000a34 <update7SEG>
		if(index_led > 3) index_led = 0;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <scanLed+0x38>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b03      	cmp	r3, #3
 8000b1e:	dd02      	ble.n	8000b26 <scanLed+0x2a>
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <scanLed+0x38>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
		setTimer3(250);
 8000b26:	20fa      	movs	r0, #250	; 0xfa
 8000b28:	f000 f9ee 	bl	8000f08 <setTimer3>
	}
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200000b4 	.word	0x200000b4
 8000b34:	20000098 	.word	0x20000098

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3c:	f000 faec 	bl	8001118 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b40:	f000 f818 	bl	8000b74 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b44:	f000 f89e 	bl	8000c84 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b48:	f000 f850 	bl	8000bec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b4c:	4807      	ldr	r0, [pc, #28]	; (8000b6c <main+0x34>)
 8000b4e:	f001 fa4d 	bl	8001fec <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <main+0x38>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	601a      	str	r2, [r3, #0]
  setTimer3(100);
 8000b58:	2064      	movs	r0, #100	; 0x64
 8000b5a:	f000 f9d5 	bl	8000f08 <setTimer3>
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_automatic_run();
 8000b5e:	f7ff faf5 	bl	800014c <fsm_automatic_run>
	  fsm_manual_run();
 8000b62:	f7ff fcad 	bl	80004c0 <fsm_manual_run>
	  scanLed();
 8000b66:	f7ff ffc9 	bl	8000afc <scanLed>
	  fsm_automatic_run();
 8000b6a:	e7f8      	b.n	8000b5e <main+0x26>
 8000b6c:	200000c4 	.word	0x200000c4
 8000b70:	2000006c 	.word	0x2000006c

08000b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b090      	sub	sp, #64	; 0x40
 8000b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7a:	f107 0318 	add.w	r3, r7, #24
 8000b7e:	2228      	movs	r2, #40	; 0x28
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 fdea 	bl	800275c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b9e:	2310      	movs	r3, #16
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba6:	f107 0318 	add.w	r3, r7, #24
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 fde6 	bl	800177c <HAL_RCC_OscConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000bb6:	f000 f8c9 	bl	8000d4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bba:	230f      	movs	r3, #15
 8000bbc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 f852 	bl	8001c7c <HAL_RCC_ClockConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000bde:	f000 f8b5 	bl	8000d4c <Error_Handler>
  }
}
 8000be2:	bf00      	nop
 8000be4:	3740      	adds	r7, #64	; 0x40
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf2:	f107 0308 	add.w	r3, r7, #8
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c00:	463b      	mov	r3, r7
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c08:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c10:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c12:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c18:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c20:	220a      	movs	r2, #10
 8000c22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c30:	4813      	ldr	r0, [pc, #76]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c32:	f001 f98b 	bl	8001f4c <HAL_TIM_Base_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c3c:	f000 f886 	bl	8000d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480c      	ldr	r0, [pc, #48]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c4e:	f001 fb21 	bl	8002294 <HAL_TIM_ConfigClockSource>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c58:	f000 f878 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c64:	463b      	mov	r3, r7
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c6a:	f001 fce9 	bl	8002640 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c74:	f000 f86a 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200000c4 	.word	0x200000c4

08000c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	f107 0308 	add.w	r3, r7, #8
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c98:	4b29      	ldr	r3, [pc, #164]	; (8000d40 <MX_GPIO_Init+0xbc>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a28      	ldr	r2, [pc, #160]	; (8000d40 <MX_GPIO_Init+0xbc>)
 8000c9e:	f043 0304 	orr.w	r3, r3, #4
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <MX_GPIO_Init+0xbc>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f003 0304 	and.w	r3, r3, #4
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb0:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <MX_GPIO_Init+0xbc>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a22      	ldr	r2, [pc, #136]	; (8000d40 <MX_GPIO_Init+0xbc>)
 8000cb6:	f043 0308 	orr.w	r3, r3, #8
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b20      	ldr	r3, [pc, #128]	; (8000d40 <MX_GPIO_Init+0xbc>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0308 	and.w	r3, r3, #8
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_CHECK_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f24f 11fc 	movw	r1, #61948	; 0xf1fc
 8000cce:	481d      	ldr	r0, [pc, #116]	; (8000d44 <MX_GPIO_Init+0xc0>)
 8000cd0:	f000 fd23 	bl	800171a <HAL_GPIO_WritePin>
                          |LED_GREEN1_Pin|LED_YELLOW1_Pin|LED_RED1_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG10_Pin
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000cda:	481b      	ldr	r0, [pc, #108]	; (8000d48 <MX_GPIO_Init+0xc4>)
 8000cdc:	f000 fd1d 	bl	800171a <HAL_GPIO_WritePin>
                          |SEG8_Pin|SEG9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_CHECK_Pin LED_GREEN_Pin LED_YELLOW_Pin LED_RED_Pin
                           LED_GREEN1_Pin LED_YELLOW1_Pin LED_RED1_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_CHECK_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin
 8000ce0:	f24f 13fc 	movw	r3, #61948	; 0xf1fc
 8000ce4:	60bb      	str	r3, [r7, #8]
                          |LED_GREEN1_Pin|LED_YELLOW1_Pin|LED_RED1_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 0308 	add.w	r3, r7, #8
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4812      	ldr	r0, [pc, #72]	; (8000d44 <MX_GPIO_Init+0xc0>)
 8000cfa:	f000 fb7d 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG10_Pin
                           SEG11_Pin SEG12_Pin SEG13_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin SEG7_Pin
                           SEG8_Pin SEG9_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG10_Pin
 8000cfe:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000d02:	60bb      	str	r3, [r7, #8]
                          |SEG11_Pin|SEG12_Pin|SEG13_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|SEG7_Pin
                          |SEG8_Pin|SEG9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d10:	f107 0308 	add.w	r3, r7, #8
 8000d14:	4619      	mov	r1, r3
 8000d16:	480c      	ldr	r0, [pc, #48]	; (8000d48 <MX_GPIO_Init+0xc4>)
 8000d18:	f000 fb6e 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8000d1c:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000d20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0308 	add.w	r3, r7, #8
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <MX_GPIO_Init+0xc0>)
 8000d32:	f000 fb61 	bl	80013f8 <HAL_GPIO_Init>

}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010800 	.word	0x40010800
 8000d48:	40010c00 	.word	0x40010c00

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <Error_Handler+0x8>
	...

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_MspInit+0x5c>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	4a14      	ldr	r2, [pc, #80]	; (8000db4 <HAL_MspInit+0x5c>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6193      	str	r3, [r2, #24]
 8000d6a:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_MspInit+0x5c>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <HAL_MspInit+0x5c>)
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <HAL_MspInit+0x5c>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d80:	61d3      	str	r3, [r2, #28]
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <HAL_MspInit+0x5c>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_MspInit+0x60>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <HAL_MspInit+0x60>)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000daa:	bf00      	nop
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40010000 	.word	0x40010000

08000dbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dcc:	d113      	bne.n	8000df6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <HAL_TIM_Base_MspInit+0x44>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <HAL_TIM_Base_MspInit+0x44>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	61d3      	str	r3, [r2, #28]
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <HAL_TIM_Base_MspInit+0x44>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	201c      	movs	r0, #28
 8000dec:	f000 facd 	bl	800138a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000df0:	201c      	movs	r0, #28
 8000df2:	f000 fae6 	bl	80013c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <NMI_Handler+0x4>

08000e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <MemManage_Handler+0x4>

08000e16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr

08000e2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr

08000e3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr

08000e46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e4a:	f000 f9ab 	bl	80011a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <TIM2_IRQHandler+0x10>)
 8000e5a:	f001 f913 	bl	8002084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200000c4 	.word	0x200000c4

08000e68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <HAL_TIM_PeriodElapsedCallback>:
#include "timer.h"

#define Timer_Cycle 10

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e84:	d101      	bne.n	8000e8a <HAL_TIM_PeriodElapsedCallback+0x16>
		button_reading();
 8000e86:	f7ff fceb 	bl	8000860 <button_reading>
	}
	timer_run();
 8000e8a:	f000 f859 	bl	8000f40 <timer_run>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <setTimer1>:

int timer1_counter = 0;
int timer2_counter = 0;
int timer3_counter = 0;

void setTimer1(int duration){
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/Timer_Cycle;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <setTimer1+0x2c>)
 8000ea4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea8:	1092      	asrs	r2, r2, #2
 8000eaa:	17db      	asrs	r3, r3, #31
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <setTimer1+0x30>)
 8000eb0:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <setTimer1+0x34>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	66666667 	.word	0x66666667
 8000ec8:	200000b8 	.word	0x200000b8
 8000ecc:	200000ac 	.word	0x200000ac

08000ed0 <setTimer2>:
void setTimer2(int duration){
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/Timer_Cycle;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a08      	ldr	r2, [pc, #32]	; (8000efc <setTimer2+0x2c>)
 8000edc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ee0:	1092      	asrs	r2, r2, #2
 8000ee2:	17db      	asrs	r3, r3, #31
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <setTimer2+0x30>)
 8000ee8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <setTimer2+0x34>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	66666667 	.word	0x66666667
 8000f00:	200000bc 	.word	0x200000bc
 8000f04:	200000b0 	.word	0x200000b0

08000f08 <setTimer3>:
void setTimer3(int duration){
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/Timer_Cycle;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <setTimer3+0x2c>)
 8000f14:	fb82 1203 	smull	r1, r2, r2, r3
 8000f18:	1092      	asrs	r2, r2, #2
 8000f1a:	17db      	asrs	r3, r3, #31
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <setTimer3+0x30>)
 8000f20:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <setTimer3+0x34>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	66666667 	.word	0x66666667
 8000f38:	200000c0 	.word	0x200000c0
 8000f3c:	200000b4 	.word	0x200000b4

08000f40 <timer_run>:
void timer_run(){
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <timer_run+0x6c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	dd0b      	ble.n	8000f64 <timer_run+0x24>
		timer1_counter--;
 8000f4c:	4b17      	ldr	r3, [pc, #92]	; (8000fac <timer_run+0x6c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	3b01      	subs	r3, #1
 8000f52:	4a16      	ldr	r2, [pc, #88]	; (8000fac <timer_run+0x6c>)
 8000f54:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <timer_run+0x6c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d102      	bne.n	8000f64 <timer_run+0x24>
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <timer_run+0x70>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter > 0){
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <timer_run+0x74>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	dd0b      	ble.n	8000f84 <timer_run+0x44>
			timer2_counter--;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <timer_run+0x74>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	4a10      	ldr	r2, [pc, #64]	; (8000fb4 <timer_run+0x74>)
 8000f74:	6013      	str	r3, [r2, #0]
			if(timer2_counter == 0) timer2_flag = 1;
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <timer_run+0x74>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d102      	bne.n	8000f84 <timer_run+0x44>
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <timer_run+0x78>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	601a      	str	r2, [r3, #0]
		}
	if(timer3_counter > 0){
 8000f84:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <timer_run+0x7c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	dd0b      	ble.n	8000fa4 <timer_run+0x64>
				timer3_counter--;
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <timer_run+0x7c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	3b01      	subs	r3, #1
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <timer_run+0x7c>)
 8000f94:	6013      	str	r3, [r2, #0]
				if(timer3_counter == 0) timer3_flag = 1;
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <timer_run+0x7c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d102      	bne.n	8000fa4 <timer_run+0x64>
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <timer_run+0x80>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]
		}
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	200000b8 	.word	0x200000b8
 8000fb0:	200000ac 	.word	0x200000ac
 8000fb4:	200000bc 	.word	0x200000bc
 8000fb8:	200000b0 	.word	0x200000b0
 8000fbc:	200000c0 	.word	0x200000c0
 8000fc0:	200000b4 	.word	0x200000b4

08000fc4 <setTrafficRed>:
 *      Author: Acer
 */

#include "traffic.h"

void setTrafficRed(){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2120      	movs	r1, #32
 8000fcc:	4807      	ldr	r0, [pc, #28]	; (8000fec <setTrafficRed+0x28>)
 8000fce:	f000 fba4 	bl	800171a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2108      	movs	r1, #8
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <setTrafficRed+0x28>)
 8000fd8:	f000 fb9f 	bl	800171a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2110      	movs	r1, #16
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <setTrafficRed+0x28>)
 8000fe2:	f000 fb9a 	bl	800171a <HAL_GPIO_WritePin>
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40010800 	.word	0x40010800

08000ff0 <setTrafficGreen>:
void setTrafficGreen(){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2120      	movs	r1, #32
 8000ff8:	4807      	ldr	r0, [pc, #28]	; (8001018 <setTrafficGreen+0x28>)
 8000ffa:	f000 fb8e 	bl	800171a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2108      	movs	r1, #8
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <setTrafficGreen+0x28>)
 8001004:	f000 fb89 	bl	800171a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8001008:	2201      	movs	r2, #1
 800100a:	2110      	movs	r1, #16
 800100c:	4802      	ldr	r0, [pc, #8]	; (8001018 <setTrafficGreen+0x28>)
 800100e:	f000 fb84 	bl	800171a <HAL_GPIO_WritePin>
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40010800 	.word	0x40010800

0800101c <setTrafficYellow>:
void setTrafficYellow(){
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8001020:	2201      	movs	r2, #1
 8001022:	2120      	movs	r1, #32
 8001024:	4807      	ldr	r0, [pc, #28]	; (8001044 <setTrafficYellow+0x28>)
 8001026:	f000 fb78 	bl	800171a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 800102a:	2201      	movs	r2, #1
 800102c:	2108      	movs	r1, #8
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <setTrafficYellow+0x28>)
 8001030:	f000 fb73 	bl	800171a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2110      	movs	r1, #16
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <setTrafficYellow+0x28>)
 800103a:	f000 fb6e 	bl	800171a <HAL_GPIO_WritePin>
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40010800 	.word	0x40010800

08001048 <setTrafficRed1>:
void setTrafficRed1(){
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001052:	4807      	ldr	r0, [pc, #28]	; (8001070 <setTrafficRed1+0x28>)
 8001054:	f000 fb61 	bl	800171a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8001058:	2201      	movs	r2, #1
 800105a:	2140      	movs	r1, #64	; 0x40
 800105c:	4804      	ldr	r0, [pc, #16]	; (8001070 <setTrafficRed1+0x28>)
 800105e:	f000 fb5c 	bl	800171a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001062:	2201      	movs	r2, #1
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	4802      	ldr	r0, [pc, #8]	; (8001070 <setTrafficRed1+0x28>)
 8001068:	f000 fb57 	bl	800171a <HAL_GPIO_WritePin>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40010800 	.word	0x40010800

08001074 <setTrafficGreen1>:
void setTrafficGreen1(){
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800107e:	4807      	ldr	r0, [pc, #28]	; (800109c <setTrafficGreen1+0x28>)
 8001080:	f000 fb4b 	bl	800171a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	2140      	movs	r1, #64	; 0x40
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <setTrafficGreen1+0x28>)
 800108a:	f000 fb46 	bl	800171a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 800108e:	2201      	movs	r2, #1
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	4802      	ldr	r0, [pc, #8]	; (800109c <setTrafficGreen1+0x28>)
 8001094:	f000 fb41 	bl	800171a <HAL_GPIO_WritePin>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40010800 	.word	0x40010800

080010a0 <setTrafficYellow1>:
void setTrafficYellow1(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010aa:	4807      	ldr	r0, [pc, #28]	; (80010c8 <setTrafficYellow1+0x28>)
 80010ac:	f000 fb35 	bl	800171a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	2140      	movs	r1, #64	; 0x40
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <setTrafficYellow1+0x28>)
 80010b6:	f000 fb30 	bl	800171a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2180      	movs	r1, #128	; 0x80
 80010be:	4802      	ldr	r0, [pc, #8]	; (80010c8 <setTrafficYellow1+0x28>)
 80010c0:	f000 fb2b 	bl	800171a <HAL_GPIO_WritePin>
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40010800 	.word	0x40010800

080010cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ce:	490d      	ldr	r1, [pc, #52]	; (8001104 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010d0:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d4:	e002      	b.n	80010dc <LoopCopyDataInit>

080010d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010da:	3304      	adds	r3, #4

080010dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e0:	d3f9      	bcc.n	80010d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010e4:	4c0a      	ldr	r4, [pc, #40]	; (8001110 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e8:	e001      	b.n	80010ee <LoopFillZerobss>

080010ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ec:	3204      	adds	r2, #4

080010ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f0:	d3fb      	bcc.n	80010ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010f2:	f7ff feb9 	bl	8000e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f6:	f001 fb0d 	bl	8002714 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010fa:	f7ff fd1d 	bl	8000b38 <main>
  bx lr
 80010fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001104:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001108:	080027ac 	.word	0x080027ac
  ldr r2, =_sbss
 800110c:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8001110:	20000110 	.word	0x20000110

08001114 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC1_2_IRQHandler>
	...

08001118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <HAL_Init+0x28>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a07      	ldr	r2, [pc, #28]	; (8001140 <HAL_Init+0x28>)
 8001122:	f043 0310 	orr.w	r3, r3, #16
 8001126:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001128:	2003      	movs	r0, #3
 800112a:	f000 f923 	bl	8001374 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112e:	200f      	movs	r0, #15
 8001130:	f000 f808 	bl	8001144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001134:	f7ff fe10 	bl	8000d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40022000 	.word	0x40022000

08001144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_InitTick+0x54>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_InitTick+0x58>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115a:	fbb3 f3f1 	udiv	r3, r3, r1
 800115e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f93b 	bl	80013de <HAL_SYSTICK_Config>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e00e      	b.n	8001190 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b0f      	cmp	r3, #15
 8001176:	d80a      	bhi.n	800118e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001178:	2200      	movs	r2, #0
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	f000 f903 	bl	800138a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <HAL_InitTick+0x5c>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	e000      	b.n	8001190 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000044 	.word	0x20000044
 800119c:	2000004c 	.word	0x2000004c
 80011a0:	20000048 	.word	0x20000048

080011a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <HAL_IncTick+0x1c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_IncTick+0x20>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	4a03      	ldr	r2, [pc, #12]	; (80011c4 <HAL_IncTick+0x20>)
 80011b6:	6013      	str	r3, [r2, #0]
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	2000004c 	.word	0x2000004c
 80011c4:	2000010c 	.word	0x2000010c

080011c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b02      	ldr	r3, [pc, #8]	; (80011d8 <HAL_GetTick+0x10>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	2000010c 	.word	0x2000010c

080011dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f8:	4013      	ands	r3, r2
 80011fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120e:	4a04      	ldr	r2, [pc, #16]	; (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	60d3      	str	r3, [r2, #12]
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <__NVIC_GetPriorityGrouping+0x18>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	0a1b      	lsrs	r3, r3, #8
 800122e:	f003 0307 	and.w	r3, r3, #7
}
 8001232:	4618      	mov	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	2b00      	cmp	r3, #0
 8001250:	db0b      	blt.n	800126a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	f003 021f 	and.w	r2, r3, #31
 8001258:	4906      	ldr	r1, [pc, #24]	; (8001274 <__NVIC_EnableIRQ+0x34>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	095b      	lsrs	r3, r3, #5
 8001260:	2001      	movs	r0, #1
 8001262:	fa00 f202 	lsl.w	r2, r0, r2
 8001266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	e000e100 	.word	0xe000e100

08001278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001288:	2b00      	cmp	r3, #0
 800128a:	db0a      	blt.n	80012a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	b2da      	uxtb	r2, r3
 8001290:	490c      	ldr	r1, [pc, #48]	; (80012c4 <__NVIC_SetPriority+0x4c>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	0112      	lsls	r2, r2, #4
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	440b      	add	r3, r1
 800129c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a0:	e00a      	b.n	80012b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4908      	ldr	r1, [pc, #32]	; (80012c8 <__NVIC_SetPriority+0x50>)
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	3b04      	subs	r3, #4
 80012b0:	0112      	lsls	r2, r2, #4
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	440b      	add	r3, r1
 80012b6:	761a      	strb	r2, [r3, #24]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000e100 	.word	0xe000e100
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f1c3 0307 	rsb	r3, r3, #7
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	bf28      	it	cs
 80012ea:	2304      	movcs	r3, #4
 80012ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3304      	adds	r3, #4
 80012f2:	2b06      	cmp	r3, #6
 80012f4:	d902      	bls.n	80012fc <NVIC_EncodePriority+0x30>
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3b03      	subs	r3, #3
 80012fa:	e000      	b.n	80012fe <NVIC_EncodePriority+0x32>
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	f04f 32ff 	mov.w	r2, #4294967295
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43da      	mvns	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	401a      	ands	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001314:	f04f 31ff 	mov.w	r1, #4294967295
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa01 f303 	lsl.w	r3, r1, r3
 800131e:	43d9      	mvns	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	4313      	orrs	r3, r2
         );
}
 8001326:	4618      	mov	r0, r3
 8001328:	3724      	adds	r7, #36	; 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001340:	d301      	bcc.n	8001346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001342:	2301      	movs	r3, #1
 8001344:	e00f      	b.n	8001366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <SysTick_Config+0x40>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134e:	210f      	movs	r1, #15
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f7ff ff90 	bl	8001278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <SysTick_Config+0x40>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <SysTick_Config+0x40>)
 8001360:	2207      	movs	r2, #7
 8001362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	e000e010 	.word	0xe000e010

08001374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff2d 	bl	80011dc <__NVIC_SetPriorityGrouping>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800139c:	f7ff ff42 	bl	8001224 <__NVIC_GetPriorityGrouping>
 80013a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	68b9      	ldr	r1, [r7, #8]
 80013a6:	6978      	ldr	r0, [r7, #20]
 80013a8:	f7ff ff90 	bl	80012cc <NVIC_EncodePriority>
 80013ac:	4602      	mov	r2, r0
 80013ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b2:	4611      	mov	r1, r2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff5f 	bl	8001278 <__NVIC_SetPriority>
}
 80013ba:	bf00      	nop
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff35 	bl	8001240 <__NVIC_EnableIRQ>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ffa2 	bl	8001330 <SysTick_Config>
 80013ec:	4603      	mov	r3, r0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b08b      	sub	sp, #44	; 0x2c
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140a:	e148      	b.n	800169e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800140c:	2201      	movs	r2, #1
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	69fa      	ldr	r2, [r7, #28]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	429a      	cmp	r2, r3
 8001426:	f040 8137 	bne.w	8001698 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	4aa3      	ldr	r2, [pc, #652]	; (80016bc <HAL_GPIO_Init+0x2c4>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d05e      	beq.n	80014f2 <HAL_GPIO_Init+0xfa>
 8001434:	4aa1      	ldr	r2, [pc, #644]	; (80016bc <HAL_GPIO_Init+0x2c4>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d875      	bhi.n	8001526 <HAL_GPIO_Init+0x12e>
 800143a:	4aa1      	ldr	r2, [pc, #644]	; (80016c0 <HAL_GPIO_Init+0x2c8>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d058      	beq.n	80014f2 <HAL_GPIO_Init+0xfa>
 8001440:	4a9f      	ldr	r2, [pc, #636]	; (80016c0 <HAL_GPIO_Init+0x2c8>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d86f      	bhi.n	8001526 <HAL_GPIO_Init+0x12e>
 8001446:	4a9f      	ldr	r2, [pc, #636]	; (80016c4 <HAL_GPIO_Init+0x2cc>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d052      	beq.n	80014f2 <HAL_GPIO_Init+0xfa>
 800144c:	4a9d      	ldr	r2, [pc, #628]	; (80016c4 <HAL_GPIO_Init+0x2cc>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d869      	bhi.n	8001526 <HAL_GPIO_Init+0x12e>
 8001452:	4a9d      	ldr	r2, [pc, #628]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d04c      	beq.n	80014f2 <HAL_GPIO_Init+0xfa>
 8001458:	4a9b      	ldr	r2, [pc, #620]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d863      	bhi.n	8001526 <HAL_GPIO_Init+0x12e>
 800145e:	4a9b      	ldr	r2, [pc, #620]	; (80016cc <HAL_GPIO_Init+0x2d4>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d046      	beq.n	80014f2 <HAL_GPIO_Init+0xfa>
 8001464:	4a99      	ldr	r2, [pc, #612]	; (80016cc <HAL_GPIO_Init+0x2d4>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d85d      	bhi.n	8001526 <HAL_GPIO_Init+0x12e>
 800146a:	2b12      	cmp	r3, #18
 800146c:	d82a      	bhi.n	80014c4 <HAL_GPIO_Init+0xcc>
 800146e:	2b12      	cmp	r3, #18
 8001470:	d859      	bhi.n	8001526 <HAL_GPIO_Init+0x12e>
 8001472:	a201      	add	r2, pc, #4	; (adr r2, 8001478 <HAL_GPIO_Init+0x80>)
 8001474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001478:	080014f3 	.word	0x080014f3
 800147c:	080014cd 	.word	0x080014cd
 8001480:	080014df 	.word	0x080014df
 8001484:	08001521 	.word	0x08001521
 8001488:	08001527 	.word	0x08001527
 800148c:	08001527 	.word	0x08001527
 8001490:	08001527 	.word	0x08001527
 8001494:	08001527 	.word	0x08001527
 8001498:	08001527 	.word	0x08001527
 800149c:	08001527 	.word	0x08001527
 80014a0:	08001527 	.word	0x08001527
 80014a4:	08001527 	.word	0x08001527
 80014a8:	08001527 	.word	0x08001527
 80014ac:	08001527 	.word	0x08001527
 80014b0:	08001527 	.word	0x08001527
 80014b4:	08001527 	.word	0x08001527
 80014b8:	08001527 	.word	0x08001527
 80014bc:	080014d5 	.word	0x080014d5
 80014c0:	080014e9 	.word	0x080014e9
 80014c4:	4a82      	ldr	r2, [pc, #520]	; (80016d0 <HAL_GPIO_Init+0x2d8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d013      	beq.n	80014f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ca:	e02c      	b.n	8001526 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	623b      	str	r3, [r7, #32]
          break;
 80014d2:	e029      	b.n	8001528 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	3304      	adds	r3, #4
 80014da:	623b      	str	r3, [r7, #32]
          break;
 80014dc:	e024      	b.n	8001528 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	3308      	adds	r3, #8
 80014e4:	623b      	str	r3, [r7, #32]
          break;
 80014e6:	e01f      	b.n	8001528 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	330c      	adds	r3, #12
 80014ee:	623b      	str	r3, [r7, #32]
          break;
 80014f0:	e01a      	b.n	8001528 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d102      	bne.n	8001500 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014fa:	2304      	movs	r3, #4
 80014fc:	623b      	str	r3, [r7, #32]
          break;
 80014fe:	e013      	b.n	8001528 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d105      	bne.n	8001514 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001508:	2308      	movs	r3, #8
 800150a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69fa      	ldr	r2, [r7, #28]
 8001510:	611a      	str	r2, [r3, #16]
          break;
 8001512:	e009      	b.n	8001528 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001514:	2308      	movs	r3, #8
 8001516:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69fa      	ldr	r2, [r7, #28]
 800151c:	615a      	str	r2, [r3, #20]
          break;
 800151e:	e003      	b.n	8001528 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001520:	2300      	movs	r3, #0
 8001522:	623b      	str	r3, [r7, #32]
          break;
 8001524:	e000      	b.n	8001528 <HAL_GPIO_Init+0x130>
          break;
 8001526:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	2bff      	cmp	r3, #255	; 0xff
 800152c:	d801      	bhi.n	8001532 <HAL_GPIO_Init+0x13a>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	e001      	b.n	8001536 <HAL_GPIO_Init+0x13e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3304      	adds	r3, #4
 8001536:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	2bff      	cmp	r3, #255	; 0xff
 800153c:	d802      	bhi.n	8001544 <HAL_GPIO_Init+0x14c>
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	e002      	b.n	800154a <HAL_GPIO_Init+0x152>
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	3b08      	subs	r3, #8
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	210f      	movs	r1, #15
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	fa01 f303 	lsl.w	r3, r1, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	401a      	ands	r2, r3
 800155c:	6a39      	ldr	r1, [r7, #32]
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	431a      	orrs	r2, r3
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 8090 	beq.w	8001698 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001578:	4b56      	ldr	r3, [pc, #344]	; (80016d4 <HAL_GPIO_Init+0x2dc>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	4a55      	ldr	r2, [pc, #340]	; (80016d4 <HAL_GPIO_Init+0x2dc>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6193      	str	r3, [r2, #24]
 8001584:	4b53      	ldr	r3, [pc, #332]	; (80016d4 <HAL_GPIO_Init+0x2dc>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001590:	4a51      	ldr	r2, [pc, #324]	; (80016d8 <HAL_GPIO_Init+0x2e0>)
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	089b      	lsrs	r3, r3, #2
 8001596:	3302      	adds	r3, #2
 8001598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	220f      	movs	r2, #15
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	4013      	ands	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a49      	ldr	r2, [pc, #292]	; (80016dc <HAL_GPIO_Init+0x2e4>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d00d      	beq.n	80015d8 <HAL_GPIO_Init+0x1e0>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a48      	ldr	r2, [pc, #288]	; (80016e0 <HAL_GPIO_Init+0x2e8>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d007      	beq.n	80015d4 <HAL_GPIO_Init+0x1dc>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a47      	ldr	r2, [pc, #284]	; (80016e4 <HAL_GPIO_Init+0x2ec>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d101      	bne.n	80015d0 <HAL_GPIO_Init+0x1d8>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e004      	b.n	80015da <HAL_GPIO_Init+0x1e2>
 80015d0:	2303      	movs	r3, #3
 80015d2:	e002      	b.n	80015da <HAL_GPIO_Init+0x1e2>
 80015d4:	2301      	movs	r3, #1
 80015d6:	e000      	b.n	80015da <HAL_GPIO_Init+0x1e2>
 80015d8:	2300      	movs	r3, #0
 80015da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015dc:	f002 0203 	and.w	r2, r2, #3
 80015e0:	0092      	lsls	r2, r2, #2
 80015e2:	4093      	lsls	r3, r2
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015ea:	493b      	ldr	r1, [pc, #236]	; (80016d8 <HAL_GPIO_Init+0x2e0>)
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	089b      	lsrs	r3, r3, #2
 80015f0:	3302      	adds	r3, #2
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d006      	beq.n	8001612 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001604:	4b38      	ldr	r3, [pc, #224]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4937      	ldr	r1, [pc, #220]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	600b      	str	r3, [r1, #0]
 8001610:	e006      	b.n	8001620 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001612:	4b35      	ldr	r3, [pc, #212]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	43db      	mvns	r3, r3
 800161a:	4933      	ldr	r1, [pc, #204]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 800161c:	4013      	ands	r3, r2
 800161e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d006      	beq.n	800163a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800162c:	4b2e      	ldr	r3, [pc, #184]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	492d      	ldr	r1, [pc, #180]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
 8001638:	e006      	b.n	8001648 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800163a:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	43db      	mvns	r3, r3
 8001642:	4929      	ldr	r1, [pc, #164]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 8001644:	4013      	ands	r3, r2
 8001646:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d006      	beq.n	8001662 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	4923      	ldr	r1, [pc, #140]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	608b      	str	r3, [r1, #8]
 8001660:	e006      	b.n	8001670 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001662:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	43db      	mvns	r3, r3
 800166a:	491f      	ldr	r1, [pc, #124]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 800166c:	4013      	ands	r3, r2
 800166e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d006      	beq.n	800168a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	4919      	ldr	r1, [pc, #100]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	60cb      	str	r3, [r1, #12]
 8001688:	e006      	b.n	8001698 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	43db      	mvns	r3, r3
 8001692:	4915      	ldr	r1, [pc, #84]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 8001694:	4013      	ands	r3, r2
 8001696:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	3301      	adds	r3, #1
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	fa22 f303 	lsr.w	r3, r2, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f47f aeaf 	bne.w	800140c <HAL_GPIO_Init+0x14>
  }
}
 80016ae:	bf00      	nop
 80016b0:	bf00      	nop
 80016b2:	372c      	adds	r7, #44	; 0x2c
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	10320000 	.word	0x10320000
 80016c0:	10310000 	.word	0x10310000
 80016c4:	10220000 	.word	0x10220000
 80016c8:	10210000 	.word	0x10210000
 80016cc:	10120000 	.word	0x10120000
 80016d0:	10110000 	.word	0x10110000
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40010000 	.word	0x40010000
 80016dc:	40010800 	.word	0x40010800
 80016e0:	40010c00 	.word	0x40010c00
 80016e4:	40011000 	.word	0x40011000
 80016e8:	40010400 	.word	0x40010400

080016ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	887b      	ldrh	r3, [r7, #2]
 80016fe:	4013      	ands	r3, r2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001704:	2301      	movs	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
 8001708:	e001      	b.n	800170e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800170e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	460b      	mov	r3, r1
 8001724:	807b      	strh	r3, [r7, #2]
 8001726:	4613      	mov	r3, r2
 8001728:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800172a:	787b      	ldrb	r3, [r7, #1]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001730:	887a      	ldrh	r2, [r7, #2]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001736:	e003      	b.n	8001740 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001738:	887b      	ldrh	r3, [r7, #2]
 800173a:	041a      	lsls	r2, r3, #16
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	611a      	str	r2, [r3, #16]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr

0800174a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800174a:	b480      	push	{r7}
 800174c:	b085      	sub	sp, #20
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	460b      	mov	r3, r1
 8001754:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800175c:	887a      	ldrh	r2, [r7, #2]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4013      	ands	r3, r2
 8001762:	041a      	lsls	r2, r3, #16
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	43d9      	mvns	r1, r3
 8001768:	887b      	ldrh	r3, [r7, #2]
 800176a:	400b      	ands	r3, r1
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	611a      	str	r2, [r3, #16]
}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e26c      	b.n	8001c68 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 8087 	beq.w	80018aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800179c:	4b92      	ldr	r3, [pc, #584]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 030c 	and.w	r3, r3, #12
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d00c      	beq.n	80017c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017a8:	4b8f      	ldr	r3, [pc, #572]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 030c 	and.w	r3, r3, #12
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d112      	bne.n	80017da <HAL_RCC_OscConfig+0x5e>
 80017b4:	4b8c      	ldr	r3, [pc, #560]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c0:	d10b      	bne.n	80017da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c2:	4b89      	ldr	r3, [pc, #548]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d06c      	beq.n	80018a8 <HAL_RCC_OscConfig+0x12c>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d168      	bne.n	80018a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e246      	b.n	8001c68 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e2:	d106      	bne.n	80017f2 <HAL_RCC_OscConfig+0x76>
 80017e4:	4b80      	ldr	r3, [pc, #512]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a7f      	ldr	r2, [pc, #508]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 80017ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	e02e      	b.n	8001850 <HAL_RCC_OscConfig+0xd4>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10c      	bne.n	8001814 <HAL_RCC_OscConfig+0x98>
 80017fa:	4b7b      	ldr	r3, [pc, #492]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a7a      	ldr	r2, [pc, #488]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 8001800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	4b78      	ldr	r3, [pc, #480]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a77      	ldr	r2, [pc, #476]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 800180c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	e01d      	b.n	8001850 <HAL_RCC_OscConfig+0xd4>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0xbc>
 800181e:	4b72      	ldr	r3, [pc, #456]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a71      	ldr	r2, [pc, #452]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 8001824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b6f      	ldr	r3, [pc, #444]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a6e      	ldr	r2, [pc, #440]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 8001830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e00b      	b.n	8001850 <HAL_RCC_OscConfig+0xd4>
 8001838:	4b6b      	ldr	r3, [pc, #428]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a6a      	ldr	r2, [pc, #424]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 800183e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b68      	ldr	r3, [pc, #416]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a67      	ldr	r2, [pc, #412]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 800184a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800184e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d013      	beq.n	8001880 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff fcb6 	bl	80011c8 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001860:	f7ff fcb2 	bl	80011c8 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b64      	cmp	r3, #100	; 0x64
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e1fa      	b.n	8001c68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	4b5d      	ldr	r3, [pc, #372]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0xe4>
 800187e:	e014      	b.n	80018aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7ff fca2 	bl	80011c8 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff fc9e 	bl	80011c8 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	; 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e1e6      	b.n	8001c68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800189a:	4b53      	ldr	r3, [pc, #332]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x10c>
 80018a6:	e000      	b.n	80018aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d063      	beq.n	800197e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018b6:	4b4c      	ldr	r3, [pc, #304]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00b      	beq.n	80018da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018c2:	4b49      	ldr	r3, [pc, #292]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d11c      	bne.n	8001908 <HAL_RCC_OscConfig+0x18c>
 80018ce:	4b46      	ldr	r3, [pc, #280]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d116      	bne.n	8001908 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018da:	4b43      	ldr	r3, [pc, #268]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d005      	beq.n	80018f2 <HAL_RCC_OscConfig+0x176>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d001      	beq.n	80018f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e1ba      	b.n	8001c68 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f2:	4b3d      	ldr	r3, [pc, #244]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	4939      	ldr	r1, [pc, #228]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 8001902:	4313      	orrs	r3, r2
 8001904:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001906:	e03a      	b.n	800197e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d020      	beq.n	8001952 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001910:	4b36      	ldr	r3, [pc, #216]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 8001912:	2201      	movs	r2, #1
 8001914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001916:	f7ff fc57 	bl	80011c8 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800191e:	f7ff fc53 	bl	80011c8 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e19b      	b.n	8001c68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001930:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193c:	4b2a      	ldr	r3, [pc, #168]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	4927      	ldr	r1, [pc, #156]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 800194c:	4313      	orrs	r3, r2
 800194e:	600b      	str	r3, [r1, #0]
 8001950:	e015      	b.n	800197e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001952:	4b26      	ldr	r3, [pc, #152]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff fc36 	bl	80011c8 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001960:	f7ff fc32 	bl	80011c8 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e17a      	b.n	8001c68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001972:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b00      	cmp	r3, #0
 8001988:	d03a      	beq.n	8001a00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d019      	beq.n	80019c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001992:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001994:	2201      	movs	r2, #1
 8001996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001998:	f7ff fc16 	bl	80011c8 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a0:	f7ff fc12 	bl	80011c8 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e15a      	b.n	8001c68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019be:	2001      	movs	r0, #1
 80019c0:	f000 faa6 	bl	8001f10 <RCC_Delay>
 80019c4:	e01c      	b.n	8001a00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <HAL_RCC_OscConfig+0x274>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019cc:	f7ff fbfc 	bl	80011c8 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d2:	e00f      	b.n	80019f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d4:	f7ff fbf8 	bl	80011c8 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d908      	bls.n	80019f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e140      	b.n	8001c68 <HAL_RCC_OscConfig+0x4ec>
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000
 80019ec:	42420000 	.word	0x42420000
 80019f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f4:	4b9e      	ldr	r3, [pc, #632]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1e9      	bne.n	80019d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 80a6 	beq.w	8001b5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a12:	4b97      	ldr	r3, [pc, #604]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10d      	bne.n	8001a3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	4b94      	ldr	r3, [pc, #592]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	4a93      	ldr	r2, [pc, #588]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a28:	61d3      	str	r3, [r2, #28]
 8001a2a:	4b91      	ldr	r3, [pc, #580]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a36:	2301      	movs	r3, #1
 8001a38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3a:	4b8e      	ldr	r3, [pc, #568]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d118      	bne.n	8001a78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a46:	4b8b      	ldr	r3, [pc, #556]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a8a      	ldr	r2, [pc, #552]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a52:	f7ff fbb9 	bl	80011c8 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5a:	f7ff fbb5 	bl	80011c8 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b64      	cmp	r3, #100	; 0x64
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e0fd      	b.n	8001c68 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6c:	4b81      	ldr	r3, [pc, #516]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d106      	bne.n	8001a8e <HAL_RCC_OscConfig+0x312>
 8001a80:	4b7b      	ldr	r3, [pc, #492]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	4a7a      	ldr	r2, [pc, #488]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6213      	str	r3, [r2, #32]
 8001a8c:	e02d      	b.n	8001aea <HAL_RCC_OscConfig+0x36e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x334>
 8001a96:	4b76      	ldr	r3, [pc, #472]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	4a75      	ldr	r2, [pc, #468]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001a9c:	f023 0301 	bic.w	r3, r3, #1
 8001aa0:	6213      	str	r3, [r2, #32]
 8001aa2:	4b73      	ldr	r3, [pc, #460]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	4a72      	ldr	r2, [pc, #456]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	f023 0304 	bic.w	r3, r3, #4
 8001aac:	6213      	str	r3, [r2, #32]
 8001aae:	e01c      	b.n	8001aea <HAL_RCC_OscConfig+0x36e>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	2b05      	cmp	r3, #5
 8001ab6:	d10c      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x356>
 8001ab8:	4b6d      	ldr	r3, [pc, #436]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	4a6c      	ldr	r2, [pc, #432]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001abe:	f043 0304 	orr.w	r3, r3, #4
 8001ac2:	6213      	str	r3, [r2, #32]
 8001ac4:	4b6a      	ldr	r3, [pc, #424]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	4a69      	ldr	r2, [pc, #420]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6213      	str	r3, [r2, #32]
 8001ad0:	e00b      	b.n	8001aea <HAL_RCC_OscConfig+0x36e>
 8001ad2:	4b67      	ldr	r3, [pc, #412]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	4a66      	ldr	r2, [pc, #408]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	f023 0301 	bic.w	r3, r3, #1
 8001adc:	6213      	str	r3, [r2, #32]
 8001ade:	4b64      	ldr	r3, [pc, #400]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	4a63      	ldr	r2, [pc, #396]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	f023 0304 	bic.w	r3, r3, #4
 8001ae8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d015      	beq.n	8001b1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af2:	f7ff fb69 	bl	80011c8 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af8:	e00a      	b.n	8001b10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001afa:	f7ff fb65 	bl	80011c8 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e0ab      	b.n	8001c68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b10:	4b57      	ldr	r3, [pc, #348]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0ee      	beq.n	8001afa <HAL_RCC_OscConfig+0x37e>
 8001b1c:	e014      	b.n	8001b48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1e:	f7ff fb53 	bl	80011c8 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b24:	e00a      	b.n	8001b3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b26:	f7ff fb4f 	bl	80011c8 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e095      	b.n	8001c68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3c:	4b4c      	ldr	r3, [pc, #304]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1ee      	bne.n	8001b26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b48:	7dfb      	ldrb	r3, [r7, #23]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d105      	bne.n	8001b5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b4e:	4b48      	ldr	r3, [pc, #288]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	4a47      	ldr	r2, [pc, #284]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 8081 	beq.w	8001c66 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b64:	4b42      	ldr	r3, [pc, #264]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 030c 	and.w	r3, r3, #12
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d061      	beq.n	8001c34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d146      	bne.n	8001c06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b78:	4b3f      	ldr	r3, [pc, #252]	; (8001c78 <HAL_RCC_OscConfig+0x4fc>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7ff fb23 	bl	80011c8 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b86:	f7ff fb1f 	bl	80011c8 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e067      	b.n	8001c68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b98:	4b35      	ldr	r3, [pc, #212]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1f0      	bne.n	8001b86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bac:	d108      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bae:	4b30      	ldr	r3, [pc, #192]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	492d      	ldr	r1, [pc, #180]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bc0:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a19      	ldr	r1, [r3, #32]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	430b      	orrs	r3, r1
 8001bd2:	4927      	ldr	r1, [pc, #156]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd8:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <HAL_RCC_OscConfig+0x4fc>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bde:	f7ff faf3 	bl	80011c8 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be6:	f7ff faef 	bl	80011c8 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e037      	b.n	8001c68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x46a>
 8001c04:	e02f      	b.n	8001c66 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c06:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <HAL_RCC_OscConfig+0x4fc>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fadc 	bl	80011c8 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c14:	f7ff fad8 	bl	80011c8 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e020      	b.n	8001c68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c26:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x498>
 8001c32:	e018      	b.n	8001c66 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e013      	b.n	8001c68 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <HAL_RCC_OscConfig+0x4f4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d106      	bne.n	8001c62 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d001      	beq.n	8001c66 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40007000 	.word	0x40007000
 8001c78:	42420060 	.word	0x42420060

08001c7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0d0      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c90:	4b6a      	ldr	r3, [pc, #424]	; (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d910      	bls.n	8001cc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9e:	4b67      	ldr	r3, [pc, #412]	; (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f023 0207 	bic.w	r2, r3, #7
 8001ca6:	4965      	ldr	r1, [pc, #404]	; (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cae:	4b63      	ldr	r3, [pc, #396]	; (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0b8      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d020      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cd8:	4b59      	ldr	r3, [pc, #356]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	4a58      	ldr	r2, [pc, #352]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ce2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cf0:	4b53      	ldr	r3, [pc, #332]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	4a52      	ldr	r2, [pc, #328]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cfa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cfc:	4b50      	ldr	r3, [pc, #320]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	494d      	ldr	r1, [pc, #308]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d040      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d107      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	4b47      	ldr	r3, [pc, #284]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d115      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e07f      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d107      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3a:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d109      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e073      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4a:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e06b      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d5a:	4b39      	ldr	r3, [pc, #228]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f023 0203 	bic.w	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4936      	ldr	r1, [pc, #216]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d6c:	f7ff fa2c 	bl	80011c8 <HAL_GetTick>
 8001d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d72:	e00a      	b.n	8001d8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d74:	f7ff fa28 	bl	80011c8 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e053      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8a:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 020c 	and.w	r2, r3, #12
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d1eb      	bne.n	8001d74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b27      	ldr	r3, [pc, #156]	; (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d210      	bcs.n	8001dcc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 0207 	bic.w	r2, r3, #7
 8001db2:	4922      	ldr	r1, [pc, #136]	; (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e032      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d008      	beq.n	8001dea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	4916      	ldr	r1, [pc, #88]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d009      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001df6:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	490e      	ldr	r1, [pc, #56]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e0a:	f000 f821 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	490a      	ldr	r1, [pc, #40]	; (8001e44 <HAL_RCC_ClockConfig+0x1c8>)
 8001e1c:	5ccb      	ldrb	r3, [r1, r3]
 8001e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e22:	4a09      	ldr	r2, [pc, #36]	; (8001e48 <HAL_RCC_ClockConfig+0x1cc>)
 8001e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_RCC_ClockConfig+0x1d0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f98a 	bl	8001144 <HAL_InitTick>

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40022000 	.word	0x40022000
 8001e40:	40021000 	.word	0x40021000
 8001e44:	08002794 	.word	0x08002794
 8001e48:	20000044 	.word	0x20000044
 8001e4c:	20000048 	.word	0x20000048

08001e50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e50:	b490      	push	{r4, r7}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e56:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e58:	1d3c      	adds	r4, r7, #4
 8001e5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e60:	f240 2301 	movw	r3, #513	; 0x201
 8001e64:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e7a:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d002      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0x40>
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d003      	beq.n	8001e96 <HAL_RCC_GetSysClockFreq+0x46>
 8001e8e:	e02d      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e90:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e92:	623b      	str	r3, [r7, #32]
      break;
 8001e94:	e02d      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	0c9b      	lsrs	r3, r3, #18
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ea8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d013      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	0c5b      	lsrs	r3, r3, #17
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ec8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	4a0e      	ldr	r2, [pc, #56]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ece:	fb02 f203 	mul.w	r2, r2, r3
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eda:	e004      	b.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	4a0b      	ldr	r2, [pc, #44]	; (8001f0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ee0:	fb02 f303 	mul.w	r3, r2, r3
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	623b      	str	r3, [r7, #32]
      break;
 8001eea:	e002      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eee:	623b      	str	r3, [r7, #32]
      break;
 8001ef0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3728      	adds	r7, #40	; 0x28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc90      	pop	{r4, r7}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	08002784 	.word	0x08002784
 8001f04:	40021000 	.word	0x40021000
 8001f08:	007a1200 	.word	0x007a1200
 8001f0c:	003d0900 	.word	0x003d0900

08001f10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f18:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <RCC_Delay+0x34>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <RCC_Delay+0x38>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	0a5b      	lsrs	r3, r3, #9
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	fb02 f303 	mul.w	r3, r2, r3
 8001f2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f2c:	bf00      	nop
  }
  while (Delay --);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1e5a      	subs	r2, r3, #1
 8001f32:	60fa      	str	r2, [r7, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f9      	bne.n	8001f2c <RCC_Delay+0x1c>
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr
 8001f44:	20000044 	.word	0x20000044
 8001f48:	10624dd3 	.word	0x10624dd3

08001f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e041      	b.n	8001fe2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d106      	bne.n	8001f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7fe ff22 	bl	8000dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3304      	adds	r3, #4
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	f000 fa6a 	bl	8002464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d001      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e035      	b.n	8002070 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a16      	ldr	r2, [pc, #88]	; (800207c <HAL_TIM_Base_Start_IT+0x90>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d009      	beq.n	800203a <HAL_TIM_Base_Start_IT+0x4e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800202e:	d004      	beq.n	800203a <HAL_TIM_Base_Start_IT+0x4e>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a12      	ldr	r2, [pc, #72]	; (8002080 <HAL_TIM_Base_Start_IT+0x94>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d111      	bne.n	800205e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b06      	cmp	r3, #6
 800204a:	d010      	beq.n	800206e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0201 	orr.w	r2, r2, #1
 800205a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800205c:	e007      	b.n	800206e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f042 0201 	orr.w	r2, r2, #1
 800206c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40012c00 	.word	0x40012c00
 8002080:	40000400 	.word	0x40000400

08002084 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b02      	cmp	r3, #2
 8002098:	d122      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d11b      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0202 	mvn.w	r2, #2
 80020b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f9b1 	bl	800242e <HAL_TIM_IC_CaptureCallback>
 80020cc:	e005      	b.n	80020da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f9a4 	bl	800241c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f9b3 	bl	8002440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d122      	bne.n	8002134 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d11b      	bne.n	8002134 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0204 	mvn.w	r2, #4
 8002104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2202      	movs	r2, #2
 800210a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f987 	bl	800242e <HAL_TIM_IC_CaptureCallback>
 8002120:	e005      	b.n	800212e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f97a 	bl	800241c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f989 	bl	8002440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b08      	cmp	r3, #8
 8002140:	d122      	bne.n	8002188 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b08      	cmp	r3, #8
 800214e:	d11b      	bne.n	8002188 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0208 	mvn.w	r2, #8
 8002158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2204      	movs	r2, #4
 800215e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f95d 	bl	800242e <HAL_TIM_IC_CaptureCallback>
 8002174:	e005      	b.n	8002182 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f950 	bl	800241c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f95f 	bl	8002440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	2b10      	cmp	r3, #16
 8002194:	d122      	bne.n	80021dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f003 0310 	and.w	r3, r3, #16
 80021a0:	2b10      	cmp	r3, #16
 80021a2:	d11b      	bne.n	80021dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 0210 	mvn.w	r2, #16
 80021ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2208      	movs	r2, #8
 80021b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f933 	bl	800242e <HAL_TIM_IC_CaptureCallback>
 80021c8:	e005      	b.n	80021d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f926 	bl	800241c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f935 	bl	8002440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d10e      	bne.n	8002208 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d107      	bne.n	8002208 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0201 	mvn.w	r2, #1
 8002200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe fe36 	bl	8000e74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002212:	2b80      	cmp	r3, #128	; 0x80
 8002214:	d10e      	bne.n	8002234 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002220:	2b80      	cmp	r3, #128	; 0x80
 8002222:	d107      	bne.n	8002234 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800222c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 fa67 	bl	8002702 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223e:	2b40      	cmp	r3, #64	; 0x40
 8002240:	d10e      	bne.n	8002260 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224c:	2b40      	cmp	r3, #64	; 0x40
 800224e:	d107      	bne.n	8002260 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f8f9 	bl	8002452 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b20      	cmp	r3, #32
 800226c:	d10e      	bne.n	800228c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b20      	cmp	r3, #32
 800227a:	d107      	bne.n	800228c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0220 	mvn.w	r2, #32
 8002284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 fa32 	bl	80026f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <HAL_TIM_ConfigClockSource+0x18>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e0b3      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x180>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022e4:	d03e      	beq.n	8002364 <HAL_TIM_ConfigClockSource+0xd0>
 80022e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ea:	f200 8087 	bhi.w	80023fc <HAL_TIM_ConfigClockSource+0x168>
 80022ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022f2:	f000 8085 	beq.w	8002400 <HAL_TIM_ConfigClockSource+0x16c>
 80022f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022fa:	d87f      	bhi.n	80023fc <HAL_TIM_ConfigClockSource+0x168>
 80022fc:	2b70      	cmp	r3, #112	; 0x70
 80022fe:	d01a      	beq.n	8002336 <HAL_TIM_ConfigClockSource+0xa2>
 8002300:	2b70      	cmp	r3, #112	; 0x70
 8002302:	d87b      	bhi.n	80023fc <HAL_TIM_ConfigClockSource+0x168>
 8002304:	2b60      	cmp	r3, #96	; 0x60
 8002306:	d050      	beq.n	80023aa <HAL_TIM_ConfigClockSource+0x116>
 8002308:	2b60      	cmp	r3, #96	; 0x60
 800230a:	d877      	bhi.n	80023fc <HAL_TIM_ConfigClockSource+0x168>
 800230c:	2b50      	cmp	r3, #80	; 0x50
 800230e:	d03c      	beq.n	800238a <HAL_TIM_ConfigClockSource+0xf6>
 8002310:	2b50      	cmp	r3, #80	; 0x50
 8002312:	d873      	bhi.n	80023fc <HAL_TIM_ConfigClockSource+0x168>
 8002314:	2b40      	cmp	r3, #64	; 0x40
 8002316:	d058      	beq.n	80023ca <HAL_TIM_ConfigClockSource+0x136>
 8002318:	2b40      	cmp	r3, #64	; 0x40
 800231a:	d86f      	bhi.n	80023fc <HAL_TIM_ConfigClockSource+0x168>
 800231c:	2b30      	cmp	r3, #48	; 0x30
 800231e:	d064      	beq.n	80023ea <HAL_TIM_ConfigClockSource+0x156>
 8002320:	2b30      	cmp	r3, #48	; 0x30
 8002322:	d86b      	bhi.n	80023fc <HAL_TIM_ConfigClockSource+0x168>
 8002324:	2b20      	cmp	r3, #32
 8002326:	d060      	beq.n	80023ea <HAL_TIM_ConfigClockSource+0x156>
 8002328:	2b20      	cmp	r3, #32
 800232a:	d867      	bhi.n	80023fc <HAL_TIM_ConfigClockSource+0x168>
 800232c:	2b00      	cmp	r3, #0
 800232e:	d05c      	beq.n	80023ea <HAL_TIM_ConfigClockSource+0x156>
 8002330:	2b10      	cmp	r3, #16
 8002332:	d05a      	beq.n	80023ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002334:	e062      	b.n	80023fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	6899      	ldr	r1, [r3, #8]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	f000 f95c 	bl	8002602 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002358:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	609a      	str	r2, [r3, #8]
      break;
 8002362:	e04e      	b.n	8002402 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	6899      	ldr	r1, [r3, #8]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f000 f945 	bl	8002602 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002386:	609a      	str	r2, [r3, #8]
      break;
 8002388:	e03b      	b.n	8002402 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	6859      	ldr	r1, [r3, #4]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	461a      	mov	r2, r3
 8002398:	f000 f8bc 	bl	8002514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2150      	movs	r1, #80	; 0x50
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 f913 	bl	80025ce <TIM_ITRx_SetConfig>
      break;
 80023a8:	e02b      	b.n	8002402 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	6859      	ldr	r1, [r3, #4]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	461a      	mov	r2, r3
 80023b8:	f000 f8da 	bl	8002570 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2160      	movs	r1, #96	; 0x60
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f903 	bl	80025ce <TIM_ITRx_SetConfig>
      break;
 80023c8:	e01b      	b.n	8002402 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6859      	ldr	r1, [r3, #4]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	461a      	mov	r2, r3
 80023d8:	f000 f89c 	bl	8002514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2140      	movs	r1, #64	; 0x40
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f8f3 	bl	80025ce <TIM_ITRx_SetConfig>
      break;
 80023e8:	e00b      	b.n	8002402 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4619      	mov	r1, r3
 80023f4:	4610      	mov	r0, r2
 80023f6:	f000 f8ea 	bl	80025ce <TIM_ITRx_SetConfig>
        break;
 80023fa:	e002      	b.n	8002402 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80023fc:	bf00      	nop
 80023fe:	e000      	b.n	8002402 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002400:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr

0800242e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr

08002452 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a25      	ldr	r2, [pc, #148]	; (800250c <TIM_Base_SetConfig+0xa8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d007      	beq.n	800248c <TIM_Base_SetConfig+0x28>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002482:	d003      	beq.n	800248c <TIM_Base_SetConfig+0x28>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a22      	ldr	r2, [pc, #136]	; (8002510 <TIM_Base_SetConfig+0xac>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d108      	bne.n	800249e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4313      	orrs	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a1a      	ldr	r2, [pc, #104]	; (800250c <TIM_Base_SetConfig+0xa8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d007      	beq.n	80024b6 <TIM_Base_SetConfig+0x52>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ac:	d003      	beq.n	80024b6 <TIM_Base_SetConfig+0x52>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a17      	ldr	r2, [pc, #92]	; (8002510 <TIM_Base_SetConfig+0xac>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d108      	bne.n	80024c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a07      	ldr	r2, [pc, #28]	; (800250c <TIM_Base_SetConfig+0xa8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d103      	bne.n	80024fc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	615a      	str	r2, [r3, #20]
}
 8002502:	bf00      	nop
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr
 800250c:	40012c00 	.word	0x40012c00
 8002510:	40000400 	.word	0x40000400

08002514 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	f023 0201 	bic.w	r2, r3, #1
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800253e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f023 030a 	bic.w	r3, r3, #10
 8002550:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4313      	orrs	r3, r2
 8002558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	621a      	str	r2, [r3, #32]
}
 8002566:	bf00      	nop
 8002568:	371c      	adds	r7, #28
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002570:	b480      	push	{r7}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f023 0210 	bic.w	r2, r3, #16
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800259a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	031b      	lsls	r3, r3, #12
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	621a      	str	r2, [r3, #32]
}
 80025c4:	bf00      	nop
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr

080025ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b085      	sub	sp, #20
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
 80025d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f043 0307 	orr.w	r3, r3, #7
 80025f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	609a      	str	r2, [r3, #8]
}
 80025f8:	bf00      	nop
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002602:	b480      	push	{r7}
 8002604:	b087      	sub	sp, #28
 8002606:	af00      	add	r7, sp, #0
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800261c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	021a      	lsls	r2, r3, #8
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	431a      	orrs	r2, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	4313      	orrs	r3, r2
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4313      	orrs	r3, r2
 800262e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	609a      	str	r2, [r3, #8]
}
 8002636:	bf00      	nop
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002654:	2302      	movs	r3, #2
 8002656:	e041      	b.n	80026dc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a14      	ldr	r2, [pc, #80]	; (80026e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d009      	beq.n	80026b0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a4:	d004      	beq.n	80026b0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a10      	ldr	r2, [pc, #64]	; (80026ec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d10c      	bne.n	80026ca <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	4313      	orrs	r3, r2
 80026c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40012c00 	.word	0x40012c00
 80026ec:	40000400 	.word	0x40000400

080026f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr

08002702 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <__libc_init_array>:
 8002714:	b570      	push	{r4, r5, r6, lr}
 8002716:	2600      	movs	r6, #0
 8002718:	4d0c      	ldr	r5, [pc, #48]	; (800274c <__libc_init_array+0x38>)
 800271a:	4c0d      	ldr	r4, [pc, #52]	; (8002750 <__libc_init_array+0x3c>)
 800271c:	1b64      	subs	r4, r4, r5
 800271e:	10a4      	asrs	r4, r4, #2
 8002720:	42a6      	cmp	r6, r4
 8002722:	d109      	bne.n	8002738 <__libc_init_array+0x24>
 8002724:	f000 f822 	bl	800276c <_init>
 8002728:	2600      	movs	r6, #0
 800272a:	4d0a      	ldr	r5, [pc, #40]	; (8002754 <__libc_init_array+0x40>)
 800272c:	4c0a      	ldr	r4, [pc, #40]	; (8002758 <__libc_init_array+0x44>)
 800272e:	1b64      	subs	r4, r4, r5
 8002730:	10a4      	asrs	r4, r4, #2
 8002732:	42a6      	cmp	r6, r4
 8002734:	d105      	bne.n	8002742 <__libc_init_array+0x2e>
 8002736:	bd70      	pop	{r4, r5, r6, pc}
 8002738:	f855 3b04 	ldr.w	r3, [r5], #4
 800273c:	4798      	blx	r3
 800273e:	3601      	adds	r6, #1
 8002740:	e7ee      	b.n	8002720 <__libc_init_array+0xc>
 8002742:	f855 3b04 	ldr.w	r3, [r5], #4
 8002746:	4798      	blx	r3
 8002748:	3601      	adds	r6, #1
 800274a:	e7f2      	b.n	8002732 <__libc_init_array+0x1e>
 800274c:	080027a4 	.word	0x080027a4
 8002750:	080027a4 	.word	0x080027a4
 8002754:	080027a4 	.word	0x080027a4
 8002758:	080027a8 	.word	0x080027a8

0800275c <memset>:
 800275c:	4603      	mov	r3, r0
 800275e:	4402      	add	r2, r0
 8002760:	4293      	cmp	r3, r2
 8002762:	d100      	bne.n	8002766 <memset+0xa>
 8002764:	4770      	bx	lr
 8002766:	f803 1b01 	strb.w	r1, [r3], #1
 800276a:	e7f9      	b.n	8002760 <memset+0x4>

0800276c <_init>:
 800276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276e:	bf00      	nop
 8002770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002772:	bc08      	pop	{r3}
 8002774:	469e      	mov	lr, r3
 8002776:	4770      	bx	lr

08002778 <_fini>:
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277a:	bf00      	nop
 800277c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277e:	bc08      	pop	{r3}
 8002780:	469e      	mov	lr, r3
 8002782:	4770      	bx	lr
